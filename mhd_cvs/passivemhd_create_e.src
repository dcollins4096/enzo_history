c#include "error.def"
      subroutine passivemhd_create_e(density,newvx, newvy, newvz,
     +     oldvx,oldvy,oldvz,ge,
     +     bxf, byf, bzf, oldbxf, oldbyf, oldbzf,
     +     ex, ey, ez,
     +     dx, dy, dz, idim, jdim, kdim, dtIn, olddt, ProjectE,
     +     i1,i2,j1,j2,k1,k2,
     +     a,biermann,c,mh,e,chi
     + )

c-----------------------------------------------------------------------
c  Passive MHD, computer Electric field from velocities and magnetic
c
c  Input the cell center velocity and face center magnetic field
c-----------------------------------------------------------------------
      implicit none
c
c
c     input variables 
      real dtIn, olddt
      integer idim,jdim,kdim
      integer i1,i2,j1,j2,k1,k2,ProjectE,biermann
      real c,mh,e,chi
  
      real density(idim,jdim,kdim)
      real newvx(idim,jdim,kdim)
      real newvy(idim,jdim,kdim)
      real newvz(idim,jdim,kdim)
      real oldvx(idim,jdim,kdim)
      real oldvy(idim,jdim,kdim)
      real oldvz(idim,jdim,kdim)
      real ge(idim,jdim,kdim)
      real bxf(idim+1,jdim,kdim)
      real byf(idim,jdim+1,kdim)
      real bzf(idim,jdim,kdim+1)
      real oldbxf(idim+1,jdim,kdim)
      real oldbyf(idim,jdim+1,kdim)
      real oldbzf(idim,jdim,kdim+1)
      real ex(idim,jdim+1,kdim+1)
      real ey(idim+1,jdim,kdim+1)
      real ez(idim+1,jdim+1,kdim)     
      real dx,dy,dz
      real a    


      integer i, j, k, is, ie, js, je, ks, ke
      real vx(idim,jdim,kdim), vy(idim,jdim,kdim), vz(idim,jdim,kdim)     
      real dt
      real h6(idim+1,jdim+1,kdim+1),h7(idim+1,jdim+1,kdim+1) 
      real g6(idim+1,jdim+1,kdim+1),g8(idim+1,jdim+1,kdim+1)
      real f7(idim+1,jdim+1,kdim+1),f8(idim+1,jdim+1,kdim+1)
      real vxfy(idim,jdim+1,kdim),vxfz(idim,jdim,kdim+1)
      real vyfz(idim,jdim,kdim+1),vyfx(idim+1,jdim,kdim)
      real vzfy(idim,jdim+1,kdim),vzfx(idim+1,jdim,kdim)
      real vyfy(idim,jdim+1,kdim)
      real vzfz(idim,jdim,kdim+1)
      real vxfx(idim+1,jdim,kdim)
      real vyfyold(idim,jdim+1,kdim)
      real vzfzold(idim,jdim,kdim+1)
      real vxfxold(idim+1,jdim,kdim)
      real dfx(idim+1,jdim,kdim)
      real dfy(idim,jdim+1,kdim)
      real dfz(idim,jdim+1,kdim)
      real bxft(idim+1,jdim,kdim)  
      real byft(idim,jdim+1,kdim)
      real bzft(idim,jdim,kdim+1)
      real c1_temp(idim,jdim,kdim)
      real c2_temp(idim,jdim,kdim)
      real c3_temp(idim,jdim,kdim)
      real pre(idim,jdim,kdim)
      real gradient_p_1(idim,jdim,kdim)
      real gradient_p_2(idim,jdim,kdim)
      real gradient_p_3(idim,jdim,kdim)
      real eta
       
     

      real zero, one, two, onehalf, four, gam1r
      
      zero = 0.0
      one = 1.0
      two = 2.0
      four = 4.0
      onehalf = 0.5
c      eta = -0.5

c set the strt and end index
      is=i1-2
      ie=i2+4
      js=j1-2
      je=j2+4
      ks=k1-2
      ke=k2+4
       
       if( ProjectE .eq. 1 ) then
         dt = dtIn
      else
         dt = 1.0
      endif


c----------------------------------------------------------------------
c time center velocities
c---------------------------------------------------------------------
       do i=1,idim
         do j=1,jdim
           do k=1,kdim
         vx(i,j,k) = onehalf*(newvx(i,j,k)+oldvx(i,j,k))
         vy(i,j,k) = onehalf*(newvy(i,j,k)+oldvy(i,j,k))
         vz(i,j,k) = onehalf*(newvz(i,j,k)+oldvz(i,j,k))
           enddo
         enddo
       enddo

c-----------------------------------------------------------------------
c Compute Pressure
c----------------------------------------------------------------------
        do i=1,idim
         do j=1,jdim
           do k=1,kdim
         pre(i,j,k) = ge(i,j,k)*density(i,j,k)
           enddo
         enddo
       enddo

c----------------------------------------------------------------------
c compute current on the grid edge for the diffusion terms
c---------------------------------------------------------------------
       do i=1,idim
         do j=2,jdim
           do k=2,kdim
c           c1_temp(i,j-1,k-1) = 0.25*(c1(i,j-1,k)+c1(i,j,k)+c1(i,j,k-1)
c     + +c1(i,j-1,k-1) )
          c1_temp(i,j,k)=(bzf(i,j,k)-bzf(i,j-1,k))/dy 
     +        - (byf(i,j,k)-byf(i,j,k-1))/dz
           enddo
         enddo
       enddo

       do i=2,idim
         do j=1,jdim
           do k=2,kdim
c           c2_temp(i-1,j,k-1) = 0.25*(c2(i,j,k)+c2(i-1,j,k)+c2(i,j,k-1) 
c     + +c2(i-1,j,k-1) )
           c2_temp(i,j,k)=(bxf(i,j,k)-bxf(i,j,k-1))/dz
     +        - (bzf(i,j,k)-bzf(i-1,j,k))/dx
           enddo
         enddo
       enddo

         do i=2,idim
         do j=2,jdim  
           do k=1,kdim
c           c3_temp(i-1,j-1,k) = 0.25*(c3(i,j,k)+c3(i-1,j,k)+c3(i,j-1,k)
c     + +c3(i-1,j-1,k) )
         c3_temp(i,j,k)=(byf(i,j,k)-byf(i-1,j,k))/dx  
     +        - (bxf(i,j,k)-bxf(i,j-1,k))/dy  
           enddo
         enddo
       enddo

                 
c-----------------------------------------------------------------------
c   velocitiea at the cell face
c-----------------------------------------------------------------------
      if(.true.) then
      do  i=is,ie
        do j=js,je-1
           do k=ks,ke
           vxfy(i,j+1,k) = onehalf*(vx(i,j,k)+vx(i,j+1,k))
           vyfy(i,j+1,k) = onehalf*(vy(i,j,k)+vy(i,j+1,k))
           vzfy(i,j+1,k) = onehalf*(vz(i,j,k)+vz(i,j+1,k))
            enddo
        enddo
      enddo

       do  i=is,ie
        do j=js,je 
           do k=ks,ke-1 
           vzfz(i,j,k+1) = onehalf*(vz(i,j,k)+vz(i,j,k+1))
           vyfz(i,j,k+1) = onehalf*(vy(i,j,k)+vy(i,j,k+1))
           vxfz(i,j,k+1) = onehalf*(vx(i,j,k)+vx(i,j,k+1))
            enddo
        enddo
      enddo 

      
      do  i=is,ie-1
        do j=js,je
           do k=ks,ke
           vzfx(i+1,j,k) = onehalf*(vz(i,j,k)+vz(i+1,j,k))
           vyfx(i+1,j,k) = onehalf*(vy(i,j,k)+vy(i+1,j,k))
           vxfx(i+1,j,k) = onehalf*(vx(i,j,k)+vx(i+1,j,k))
            enddo
        enddo
      enddo
      endif

      if(.false.) then
          do  i=is,ie   
        do j=js,je-1 
           do k=ks,ke
           vxfy(i,j+1,k) = (sqrt(density(i,j,k))*vx(i,j,k)+
     +        sqrt(density(i,j+1,k))*vx(i,j+1,k))
     +        /(sqrt(density(i,j,k))+sqrt(density(i,j+1,k)))
            vzfy(i,j+1,k) = (sqrt(density(i,j,k))*vz(i,j,k)+
     +        sqrt(density(i,j+1,k))*vz(i,j+1,k))
     +        /(sqrt(density(i,j,k))+sqrt(density(i,j+1,k)))
            enddo
        enddo
      enddo
       
       do  i=is,ie
        do j=js,je
           do k=ks,ke-1
           vyfz(i,j,k+1) = (sqrt(density(i,j,k))*vy(i,j,k)+
     +        sqrt(density(i,j,k+1))*vy(i,j,k+1))
     +        /(sqrt(density(i,j,k))+sqrt(density(i,j,k+1)))
           vxfz(i,j,k+1) = (sqrt(density(i,j,k))*vx(i,j,k)+
     +        sqrt(density(i,j,k+1))*vx(i,j,k+1))
     +        /(sqrt(density(i,j,k))+sqrt(density(i,j,k+1)))
            enddo
        enddo
      enddo
           
      
      do  i=is,ie-1
        do j=js,je   
           do k=ks,ke
           vzfx(i+1,j,k) = (sqrt(density(i,j,k))*vz(i,j,k)+
     +        sqrt(density(i+1,j,k))*vz(i,j,k+1))
     +        /(sqrt(density(i,j,k))+sqrt(density(i+1,j,k)))
           vyfx(i+1,j,k) = (sqrt(density(i,j,k))*vy(i,j,k)+
     +        sqrt(density(i+1,j,k))*vy(i,j,k+1))  
     +        /(sqrt(density(i,j,k))+sqrt(density(i+1,j,k))) 
            enddo
        enddo
      enddo 
      endif
          
c---------------------------------------------------------------------
c old velocitues in the cell face
c---------------------------------------------------------------------
       do  i=is,ie
        do j=js,je-1
           do k=ks,ke
        vyfyold(i,j+1,k) = onehalf*(oldvy(i,j,k)+oldvy(i,j+1,k))
            enddo
        enddo
      enddo
           
       do  i=is,ie
        do j=js,je
           do k=ks,ke-1
        vzfzold(i,j,k+1) = onehalf*(oldvz(i,j,k)+oldvz(i,j,k+1))
            enddo
        enddo
      enddo
           
         
      do  i=is,ie-1
        do j=js,je
           do k=ks,ke
        vxfxold(i+1,j,k) = onehalf*(oldvx(i,j,k)+oldvx(i+1,j,k))
            enddo
        enddo
      enddo

c----------------------------------------------------------------------
c density on the cell face
c----------------------------------------------------------------------
      do  i=is,ie
        do j=js,je-1
           do k=ks,ke
        dfy(i,j+1,k) = onehalf*(density(i,j,k)+density(i,j+1,k))   
            enddo
        enddo
      enddo
          
       do  i=is,ie  
        do j=js,je   
           do k=ks,ke-1
        dfz(i,j,k+1) = onehalf*(density(i,j,k)+density(i,j,k+1))
            enddo
        enddo
      enddo
     
            
      do  i=is,ie-1
        do j=js,je
           do k=ks,ke
        dfx(i+1,j,k) = onehalf*(density(i,j,k)+density(i+1,j,k))
            enddo
        enddo
      enddo

c----------------------------------------------------------------------
c time centered magnetic fields
c---------------------------------------------------------------------
      if(.false.) then
      do i=is+1,ie
         do j=js,je
            do k=ks,ke
            bxft(i,j,k) = bxf(i,j,k) +
     + 0.5*dt*(bxf(i,j,k)-oldbxf(i,j,k))/olddt
            enddo
         enddo
      enddo

      do i=is,ie
         do j=js+1,je
            do k=ks,ke
            byft(i,j,k) = byf(i,j,k) +
     + 0.5*dt*(byf(i,j,k)-oldbyf(i,j,k))/olddt
            enddo
         enddo
      enddo

      do i=is,ie
         do j=js,je
            do k=ks+1,ke
            bzft(i,j,k) = bzf(i,j,k) +
     + 0.5*dt*(bzf(i,j,k)-oldbzf(i,j,k))/olddt
            enddo
         enddo
      enddo
      endif
      
      if(.false.) then
      do i=is+1,ie
         do j=js,je
            do k=ks,ke
            bxft(i,j,k) = bxf(i,j,k) 
     +        + sqrt(dfx(i,j,k))*(vxfx(i,j,k)-vxfxold(i,j,k)) 
            enddo
         enddo
      enddo

      do i=is,ie   
         do j=js+1,je
            do k=ks,ke
            byft(i,j,k) = byf(i,j,k) 
     +        + sqrt(dfy(i,j,k))*(vyfy(i,j,k)-vyfyold(i,j,k))
            enddo
         enddo
      enddo

      do i=is,ie   
         do j=js,je
            do k=ks+1,ke
            bzft(i,j,k) = bzf(i,j,k) 
     +        + sqrt(dfz(i,j,k))*(vzfz(i,j,k)-vzfzold(i,j,k))
            enddo
         enddo
      enddo
       endif
c-----------------------------------------------------------------------
c Fluxes
c----------------------------------------------------------------------
       do  i=is+1,ie
        do j=js+1,je
           do k=ks,ke
           f7(i,j,k) = vxfy(i,j,k)*byf(i,j,k)-vyfx(i,j,k)*bxf(i,j,k)
           g6(i,j,k) = -f7(i,j,k)
           enddo
         enddo
        enddo

        do  i=is+1,ie  
        do j=js,je  
           do k=ks+1,ke  
           f8(i,j,k) = -vzfx(i,j,k)*bxf(i,j,k)+vxfz(i,j,k)*bzf(i,j,k)
           h6(i,j,k) = -f8(i,j,k)
           enddo
         enddo
        enddo

        do  i=is,ie
        do j=js+1,je
           do k=ks+1,ke
           g8(i,j,k) = vyfz(i,j,k)*bzf(i,j,k)-vzfy(i,j,k)*byf(i,j,k)
           h7(i,j,k) = -g8(i,j,k)
           enddo
         enddo
        enddo


c----------------------------------------------------------------------
c Compute the Electric fields
c---------------------------------------------------------------------
         do k=ks+2,ke
         do j=js+2,je
            do i=is+1,ie
               
               ex(i,j,k) = .25*dt*(h7(i,j-1,k)+h7(i,j,k)
     +              -g8(i,j,k-1)-g8(i,j-1,k-1) )/a
c     +              -eta*dt*c1_temp(i,j,k)
     +        -eta*dt*dx*dx*c1_temp(i,j,k)
     +      /(sqrt(0.25*(density(i,j,k)+density(i,j-1,k-1)
     +      +  density(i,j-1,k)+density(i,j,k-1) ))*a)
c     +      *(abs(pre(i,j+1,k)-2*pre(i,j,k)+pre(i,j-1,k))
c     +       /(pre(i,j+1,k)+2*pre(i,j,k)+pre(i,j-1,k))
c     +     +  abs(pre(i,j,k+1)-2*pre(i,j,k)+pre(i,j,k-1))     
c     +      /(pre(i,j,k+1)+2*pre(i,j,k)+pre(i,j,k-1)) )
          enddo
         enddo
      enddo

        do k=ks+2,ke
         do j=js+1,je
            do i=is+2,ie
         
               ey(i,j,k) = .25*dt*(f8(i,j,k-1)+f8(i,j,k)
     +              -h6(i-1,j,k)-h6(i-1,j,k-1) )/a
c     +              -eta*dt*c2_temp(i,j,k) 
     +         -eta*dt*dy*dy*c2_temp(i,j,k)
     +      /(sqrt(0.25*(density(i,j,k)+density(i-1,j,k)
     +     +  density(i,j,k-1) + density(i-1,j,k-1)))*a)
c     +     *(abs(pre(i+1,j,k)-2*pre(i,j,k)+pre(i-1,j,k))
c     +      /(pre(i+1,j,k)+2*pre(i,j,k)+pre(i-1,j,k))
c     +    + abs(pre(i,j,k+1)-2*pre(i,j,k)+pre(i,j,k-1))
c     +      /(pre(i,j,k+1)+2*pre(i,j,k)+pre(i,j,k-1)) )
           enddo
         enddo       
      enddo      


        do k=ks+1,ke
         do j=js+2,je
            do i=is+2,ie

               ez(i,j,k) = .25*dt*(g6(i-1,j,k)+g6(i,j,k)
     +              -f7(i,j-1,k)-f7(i-1,j-1,k) )/a
c     +     -eta*dt*c3_temp(i,j,k)
     +       -eta*dt*dz*dz*c3_temp(i,j,k)
     +    /(sqrt(0.25*(density(i,j,k)+density(i-1,j,k)
     +   +  density(i,j-1,k)+density(i-1,j-1,k)))*a)
c     +   *(abs(pre(i+1,j,k)-2*pre(i,j,k)+pre(i-1,j,k))
c     +      /(pre(i+1,j,k)+2*pre(i,j,k)+pre(i-1,j,k)) 
c     +   + abs(pre(i,j+1,k)-2*pre(i,j,k)+pre(i,j-1,k))
c     +    /(pre(i,j+1,k)+2*pre(i,j,k)+pre(i,j-1,k)))      
            enddo
         enddo
      enddo
       
c      j =4 
c      k=4
c      do i=1,idim
c      write(*,*) .25*dt*(g6(i-1,j,k)+g6(i,j,k)
c     +              -f7(i,j-1,k)-f7(i-1,j-1,k) )/a,
c     + eta*dt*dz*dz*abs(c3_temp(i,j,k))*c3_temp(i,j,k)
c     +    /(sqrt(0.5*(density(i,j,k)+density(i-1,j,k)))*a),
c     + c3_temp(i,j,k)
c       enddo
c       write(*,*)

c--------------------------------------------------------
c include the biermann battery terms
c--------------------------------------------------------
         if(biermann .eq. 1) then
           do i=is+1,ie-1
             do j=js,je
               do k=ks,ke
                gradient_p_1(i,j,k)= 0.5*
     +        (pre(i+1,j,k)-pre(i-1,j,k))/dx
               enddo
             enddo
           enddo

           do i=is,ie
             do j=js+1,je-1    
               do k=ks,ke    
                gradient_p_2(i,j,k)= 0.5*
     +        (pre(i,j+1,k)-pre(i,j-1,k))/dy
               enddo
             enddo
           enddo

           do i=is,ie
             do j=js,je    
               do k=ks+1,ke-1    
                gradient_p_3(i,j,k)= 0.5*
     +        (pre(i,j,k+1)-pre(i,j,k-1))/dz
               enddo
             enddo
           enddo

         do k=ks+2,ke-1
         do j=js+2,je-1
            do i=is+1,ie-1
               ex(i,j,k) = ex(i,j,k)+
     +           (mh*c/(e*(1+chi)))*0.25*dt*(
c                ex(i,j,k) = +.25*dt*( 
     +     gradient_p_1(i,j,k)/density(i,j,k)
     +   +  gradient_p_1(i,j-1,k)/density(i,j-1,k)
     +   +  gradient_p_1(i,j,k-1)/density(i,j,k-1)
     +   +  gradient_p_1(i,j-1,k-1)/density(i,j-1,k-1))/(a*a)
          enddo
         enddo
      enddo

         do k=ks+2,ke-1   
         do j=js+1,je-1
            do i=is+2,ie-1
               ey(i,j,k) = ey(i,j,k)+
     +        (mh*c/(e*(1+chi)))*0.25*dt*(
c                ey(i,j,k) = +.25*dt*(
     +     gradient_p_2(i,j,k)/density(i,j,k)
     +   +  gradient_p_2(i-1,j,k)/density(i-1,j,k)
     +   +  gradient_p_2(i,j,k-1)/density(i,j,k-1)  
     +   +  gradient_p_2(i-1,j,k-1)/density(i-1,j,k-1))/(a*a)
          enddo
         enddo 
      enddo         

         do k=ks+1,ke-1 
         do j=js+2,je-1
            do i=is+2,ie-1  
               ez(i,j,k) = ez(i,j,k)+
     +             (mh*c/(e*(1+chi)))*0.25*dt*(
c                ez(i,j,k) = +.25*dt*(
     +     gradient_p_3(i,j,k)/density(i,j,k)
     +   +  gradient_p_3(i-1,j,k)/density(i-1,j,k)
     +   +  gradient_p_3(i,j-1,k)/density(i,j-1,k)
     +   +  gradient_p_3(i-1,j-1,k)/density(i-1,j-1,k))/(a*a)
          enddo
         enddo
      enddo

         endif



       end
