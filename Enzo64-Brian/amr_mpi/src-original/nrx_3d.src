      subroutine nrx_3d(x, rank, n1, n2, n3, dir)

      implicit none

      integer :: rank, n1, n2, n3, dir
      complex :: x(n1,n2,n3)
 
      complex, allocatable :: y(:,:,:), z(:,:,:)
      integer :: n(3)
      integer :: i,j,k
      real :: factor

!     write(*,*) 'NROT_3D ',rank,n1,n2,n3,dir

      if( rank /= 3 ) then
        write(0,*) 'NROT_3D rank != 3'
        call stop_all_cpus
      end if

      factor = 1.0/real(n1*n2*n3)

      n(1) = n1
      n(2) = 1
      n(3) = 1

      do k=1,n3
      do j=1,n2
!     fft( n1, x(1,j,k) )
      call fourn(x(1,j,k), n, 1, dir)
      end do
      end do

      allocate( y(n2,n3,n1) )

!     do i=1,n1
!     do k=1,n3
!     do j=1,n2
!     y(j,k,i) = x(i,j,k)
!     end do
!     end do
!     end do

      call rotate3d(x,n1,n2,n3,y)

!     deallocate( x )

      n(1) = n2
      do i=1,n1
      do k=1,n3
!     fft( n2, y(1,k,i) )
      call fourn(y(1,k,i), n, 1, dir)
      end do
      end do

      allocate( z(n3,n1,n2) )

!     do j=1,n2
!     do i=1,n1
!     do k=1,n3
!     z(k,i,j) = y(j,k,i)
!     end do
!     end do
!     end do

      call rotate3d(y,n2,n3,n1,z)

      deallocate( y)

      n(1) = n3
      do j=1,n2
      do i=1,n1
!     fft( n3, z(1,i,j) )
      call fourn(z(1,i,j), n, 1, dir)
      end do
      end do

!     allocate( x(n1,n2,n3) )

!     do k=1,n3
!     do j=1,n2
!     do i=1,n1
!     x(i,j,k) = z(k,i,j)
!     end do
!     end do
!     end do

      call rotate3d(z,n3,n1,n2,x)

      deallocate( z )

      if( dir == 1 ) then
        x = x * factor
      end if

      return
      end
