#=======================================================================
#  MAKEFILE FOR AMR ANALYSIS
#  Robert Harkness, October 2005
#=======================================================================
#
# ENZO_PPR is one of p4 (single), p8 (double) or p16 (quad) for
#          precision of position
# ENZO_XPR is r4 (32 bits) or r8 (64 bits) for float and real and
#          MUST be <= precision of position
# FORTPR   defines how Fortran real precision is specified to the
#          compiler e.g. SGI -r8; IBM -qrealsize=8
# INIT_PPR is the precision of the data generated by inits
#          STRONG RECOMMENDATION: always use 64-bit inits
#          and always set INIT_PPR := INITS64
#
# The process of building ENZO executables can be controlled by setting
# the following environment variables:
#
# name       default     allowed values
# ENZO_PPR   p8          p4, p8, p16
# ENZO_XPR   r8          r4, r8
# ENZO_HDF   hdf5        hdf5, hdf4 withdrawn
# ENZO_SRB   no_srb      use_srb, no_srb
# ENZO_AMR   adaptive    adaptive, unigrid (for fast transpose only)
# ENZO_END   HDF5_BE     HDF5_BE, HDF4_LE (not recommended)
# INIT_PPR   INITS64     INITS64, INITS32 (not recommended)
# MPICH_GM   no          yes, no (optimization for single-thread mpich-gm)
# PACK_AMR   no          yes, no
#
# The makefile will attempt to determine the operating system and
# its default message-passing library (in most cases MPI), but by
# setting the following environment variables one can easily
# experiment with new systems. All that is required is consistency
# in the naming convention, and machine-specific include files
# for HDF4 or HDF5.  It may also be necessary to specify FORTPR.
#
# ENZO_ARCH  auto        anything you like (e.g. cray_x1)
# ENZO_MESS  auto        mpi, vmi, mpich etc.

# Constants - do not edit!
null :=
hdf4 := hdf4
hdf5 := hdf5
no_srb := no_srb
unigrid := unigrid
adaptive := adaptive

# Settings - change at will
#ENZO_INT := LARGE_INTS
ENZO_INT := SMALL_INTS
ENZO_AMR := unigrid
INIT_PPR := INITS64
MPICH_GM := yes
PACK_AMR := no
ENZO_PPR := p8
ENZO_XPR := r8

ifeq ($(ENZO_PPR),$(null))
  ENZO_PPR := p8
endif
ifeq ($(ENZO_XPR),$(null))
  ENZO_XPR := r4
endif

# In some pathological cases this may need to be set explicitly

#SYSTEM := BGL

SYSTEM := $(shell uname -s)
UNAMEM := $(shell uname -m)

ifeq ($(ENZO_ARCH),$(null))

ifeq ($(SYSTEM),UNICOS/mp)
  ENZO_ARCH = crayx1
  ENZO_MESS = mpi
  ifeq ($(ENZO_XPR),r8)
    FORTPR = -s real64
  endif
endif

ifeq ($(SYSTEM),IRIX64)
  ENZO_ARCH = irix64
  ENZO_MESS = mpi
  ifeq ($(ENZO_XPR),r8)
    FORTPR = -r8 -r8const -d8
  endif
endif

ifeq ($(SYSTEM),OSF1)
  ENZO_ARCH = osf64
  ENZO_MESS = mpi
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -real_size 64 -integer_size 64 -double_size 64 -fpconstant
    else
      FORTPR = -real_size 32 -integer_size 64 -double_size 64 -fpconstant
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -real_size 64 -integer_size 32 -double_size 64 -fpconstant
    else
      FORTPR = -real_size 32 -integer_size 32 -double_size 64 -fpconstant
    endif
  endif
endif

ifeq ($(SYSTEM),AIX)
  ifeq ($(OBJECT_MODE),$(null))
    ENZO_ARCH = aix32
    ENZO_MESS = mpi
  endif
  ifeq ($(OBJECT_MODE),64)
    ENZO_ARCH = aix64
    ENZO_MESS = mpi
  endif
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=8 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=8
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=4 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=4
    endif
  endif
endif

ifeq ($(SYSTEM),BGL)
  ENZO_ARCH = bgl
  ENZO_MESS = mpi.opt
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=8 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=8 -qrealsize=4
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -qintsize=4 -qrealsize=8 -qdpc=e
    else
      FORTPR = -qintsize=4 -qrealsize=4
    endif
  endif
endif

ifeq ($(SYSTEM),SunOS)
  ENZO_ARCH = sun64
  ENZO_MESS = mpi
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -xtypemap=real:64,double:64,integer:64
    else
      FORTPR = -xtypemap=real:32,double:64,integer:64
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -xtypemap=real:64,double:64,integer:32
    else
      FORTPR = -xtypemap=real:32,double:64,integer:32
    endif
  endif
endif

ifeq ($(SYSTEM),Linux)
  ifeq ($(UNAMEM),ia64)
    ENZO_ARCH = tg64_sdsc_v8
    ENZO_MESS = mpich
  endif
  ifeq ($(UNAMEM),i686)
    ENZO_ARCH = i686
    ENZO_MESS = vmi
  endif
  ifeq ($(ENZO_INT),LARGE_INTS)
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -r8 -i8
    else
      FORTPR = -r4 -i8
    endif
  else
    ifeq ($(ENZO_XPR),r8)
      FORTPR = -r8 -i4
    else
      FORTPR = -r4 -i4
    endif
  endif
endif

endif

ifeq ($(ENZO_HDF),$(null))
  ENZO_HDF := hdf5
endif

ifeq ($(ENZO_END),$(null))
  ENZO_END := HDF5_BE
endif

ifeq ($(SYSTEM),Linux)
  CPP_FLAG := -traditional
endif
ifeq ($(SYSTEM),OSF1)
  CPP_FLAG := -traditional
endif

#-------------------  object files  ------------------------------------

ifeq ($(ENZO_HDF),$(hdf5))
  HDV := HDF5
endif

ifeq ($(ENZO_HDF),$(hdf4))
  HDV := HDF4
endif

ENZO_ANYL_OBJ :=	${HDV}_AnalyzeCluster.o			\
			AnalyzeClusterComputeClumpingFactor.o	\
			AnalyzeClusterReadParameterFile.o	\
		 	Grid_AddToDiskProfile.o			\
		 	Grid_AddToDiskProfileAngMomTrans.o	\
			Grid_AddToRadialProfile.o		\
			Grid_AddToRadialProfileStats.o		\
			Grid_CollectParticleInfo.o		\
			Grid_FindMaximumBaryonDensity.o		\
			Grid_FindMeanVelocity.o			

SB_ANYL_OBJ :=		AnalyzeSBCluster.o			\
			Grid_AddToRadialProfile.o		\
			Grid_FindMaximumBaryonDensity.o		\
			Grid_FindMeanVelocity.o			

FINDINIT_OBJ := 	${HDV}_FindClusterInitialExtent.o	\
			Grid_FindMatchingParticles.o		\
			Grid_FindParticlesWithinSphere.o		

FINDPEAKS_OBJ :=	FindDensityPeaks.o			\
			Grid_FindDensityPeaks.o

ENZOHOP_OBJ   := 	HopAnalysis.o				\
			hop_hop.o				\
			hop_kd.o				\
			hop_regroup.o				\
			hop_slice.o				\
			hop_smooth.o

DUMPGRIDS_OBJ := 	DumpGridData.o				\
			Grid_DumpGridData.o

FINDHIREZ_OBJ := 	${HDV}_FindHighResolutionRegions.o	\
			Grid_FindMatchingParticles.o		\
			Grid_ReturnParticleIndexList.o		

ENZOSTATS_OBJ := 	EnzoGlobalStatistics.o			\
			Grid_ComputeGlobalStatistics.o

#-------------------  macro definitions -------------------------------

.SUFFIXES:
.SUFFIXES: .src .c .f .o .C

EXEDIR  = 

AMR_DIR = ../src

SHELL   = csh

#------------------ include machine-dependent macros -----------------

INCLUDE_MAKEFILE = ../../MakeMacros/Parallel/Make.${ENZO_ARCH}.${ENZO_MESS}
include ${INCLUDE_MAKEFILE}

#--------------------  implicit rules ---------------------------------

.src.o:
	${CPP} -D${ENZO_PPR} ${DEFINES} -D${ENZO_XPR} -P ${CPP_FLAG} $< > $*.f
	${FC} -I${AMR_DIR} ${FFLAGS} ${FC_OPT} ${FORTPR} ${DEBUG} ${OPTS} $*.f 
.C.o:
	${CCxx} -I. -I${AMR_DIR} ${CCxxFLAGS} ${CCxx_OPT} -D${ENZO_INT} -D${INIT_PPR} -D ${ENZO_PPR} -D ${ENZO_XPR} -D ${ENZO_END} ${DEBUG} ${OPTS} $*.C
.c.o:
	${CC} -I. -I${AMR_DIR} ${CFLAGS} ${CC_OPT} -D${ENZO_INT} -D ${ENZO_PPR} -D ${ENZO_XPR} -D ${ENZO_END} ${DEBUG} ${OPTS} -c $<

#----------------------------- help ------------------------------------

help:
	@echo Type 'make enzo_anyl' for single profile analyzer
	@echo Type 'make sb_anyl'   for Santa Barbara profile analyzer
	@echo Type 'make findinit'  for cluster initial extent finder
	@echo Type 'make findpeaks' for cluster peak finder
	@echo Type 'make enzohop'   for hop analysis
	@echo Type 'make dumpgrids' for grid and star particle output
	@echo Type 'make findhirez' for high resolution regions
	@echo Type 'make enzostats' for global statistics
	@echo Type 'make clean' to remove object files, etc

#-------------------------  main targets  ------------------------------

enzo_anyl: ${ENZO_ANYL_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}enzo_anyl \
	${ENZO_ANYL_OBJ} ${AMR_DIR}/*.o ${LIB}

sb_anyl: ${SB_ANYL_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}sb_anyl \
	${SB_ANYL_OBJ} ${AMR_DIR}/*.o ${LIB}

findinit: ${FINDINIT_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}findinit \
	${FINDINIT_OBJ} ${AMR_DIR}/*.o ${LIB}

findpeaks: ${FINDPEAKS_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}findpeaks \
	${FINDPEAKS_OBJ} ${AMR_DIR}/*.o ${LIB}

enzohop: ${ENZOHOP_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}enzohop \
	${ENZOHOP_OBJ} ${AMR_DIR}/*.o ${LIB}

dumpgrids: ${DUMPGRIDS_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}dumpgrids \
	${DUMPGRIDS_OBJ} ${AMR_DIR}/*.o ${LIB}

findhirez: ${FINDHIREZ_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}findhirez \
	${FINDHIREZ_OBJ} ${AMR_DIR}/*.o ${LIB}

enzostats: ${ENZOSTATS_OBJ} purge_main
	${LDR} ${LDR_OPTIMIZE} ${DEBUG} -o ${EXEDIR}enzostats \
	${ENZOSTATS_OBJ} ${AMR_DIR}/*.o ${LIB}

#---------------------  special compilation rules ---------------------

purge_main:
	if (-f ../src/X_Main.o) /bin/rm -f ../src/X_Main.o
	if (-f ../src/flow.o) /bin/rm -f ../src/flow.o
	if (-f ../src/EvolveHierarchy.o) /bin/rm -f ../src/EvolveHierarchy.o

#----------------------------- clean ------------------------------------

clean:
	/bin/rm -f *.o *~ enzo_anyl findinit findpeaks enzohop \
                       dumpgrids enzostats findhirez

#-----------------------------------------------------------------------

${ENZO_ANYL_OBJ}: Grid.h
${FINDINIT_OBJ}: Grid.h
