#include "fortran.def"                                                  
c=======================================================================
c////////////////////////  SUBROUTINE STAR_MAKER \\\\\\\\\\\\\\\\\\\\\\\
c
      subroutine star_maker1(nx, ny, nz,
     &                      d, dm, temp, u, v, w, cooltime,
     &                      dt, r, dx, t, z, procnum,
     &                      d1, x1, v1, t1,
     &                      nmax, xstart, ystart, zstart, ibuff, 
     &                      imethod,
     &                      odthresh, masseff, smthresh, level, np,
     &                      xp, yp, zp, up, vp, wp,
     &                      mp, tdp, tcp)
c
c  CREATES GALAXY PARTICLES
c
c  written by: Chris Loken
c  date:       3 March 1997
c  modified1: 2 March 1999 by Brian O''Shea
c    2 inputs were added: odthresh and masseff, and the star creation
c    code was implemented
c  modified2: 18 May 1999 by Brian O''Shea
c    1 input added: smthresh, and star particle selection code added
c
c  INPUTS:
c
c    d     - density field
c    dm    - dark matter field
c    temp  - temperature field
c    u,v,w - velocity fields
c    cooltime - cooling time in code units
c    r     - refinement field (non-zero if zone is further refined)
c    dt    - current timestep
c    dx    - zone size (code units)
c    t     - current time
c    z     - current redshift
c    procnum - processor number (for output)
c    d1,x1,v1,t1 - factors to convert d,dx,v,t to physical units
c    nx,ny,nz - dimensions of field arrays
c    ibuff    - number of buffer zones at each end of grid
c    imethod  - Hydro method (0/1 -- PPM DE/LR, 2 - ZEUS)
c    odthresh - overdensity threshold (some number * avg. density)
c    masseff - gas-to-mass conversion efficiency ( 0<=masseff<=1 )
c    smthresh - star mass threshold (only creates stars with mass >
c        smthresh unless (random number) < starmass/smthresh )
c    level - current level of refinement
c
c    np   - number of particles created
c    x/y/z start - starting position of grid origin
c    xp,yp,zp - positions of created particles
c    up,vp,wp - velocities of created particles
c    mp       - mass of new particles
c    tdp      - dynamical time of zone in which particle created
c    tcp      - creation time of particle
c    nmax     - particle array size specified by calling routine
c
c
c-----------------------------------------------------------------------
#ifdef UNUSED
       implicit none
c-----------------------------------------------------------------------
c
c  Arguments
c
      integer nx, ny, nz, ibuff, nmax, np, level, procnum, imethod
      real   d(nx,ny,nz), dm(nx,ny,nz), temp(nx,ny,nz)
      real   u(nx,ny,nz), v(nx,ny,nz), w(nx,ny,nz)
      real   r(nx,ny,nz), cooltime(nx,ny,nz)
      real   dt, dx, t, z
      real   d1, x1, v1, t1
      real   xstart, ystart, zstart
      real   xp(nmax), yp(nmax), zp(nmax)
      real   up(nmax), vp(nmax), wp(nmax)
      real   mp(nmax), tdp(nmax), tcp(nmax)
      real   odthresh, masseff, smthresh

c
c  Locals:
c
      integer  i, j, k, ii
      real   div, tdyn, dtot, tcool
      real   starmass, starfraction
      double precision bmass, jeanmass, msolar, 
     &                 isosndsp, sndspdC, pi,
     &                 tinybmass, G, mindensity
      parameter (pi=3.14159265, G=6.67D-8, sndspdC=1.3095D8,
     &           msolar=1.989D33, mindensity=1.00D-24 )
      real   rand, x
      external rand

      ii = 0

c  for each zone, : "star" particle is created if answers to all the
c  following questions are affirmative:
c
c    is this the finest level of refinement ?
c    is the density greater than a critical density ?
c    is the flow convergent ?
c    is the cooling time less than a dynamical time ? 
c    is the gas mass greater than the Jean''s mass?


c      write(6,*) 'in star maker, level = ', level

      do k=1+ibuff,nz-ibuff
        do j=1+ibuff,ny-ibuff
          do i=1+ibuff,nx-ibuff

c    goes to next cell if this cell is not most refined
            if(r(i,j,k) .ne. 0.0) goto 10

c    goes to next cell if this is less than overdensity threshold
            if(d(i,j,k) .lt. odthresh) goto 10

c    or if it is less than a predefined minimum density
            if( (dble(d(i,j,k)*d1)) .lt. mindensity ) goto 10

c    calculates divergence (the first is face centered for ZEUS, the second
c                           is cell-centered for PPM)
            if (imethod .eq. 2) then
               div = u(i+1,j  ,k  ) - u(i,j,k)
     &             + v(i  ,j+1,k  ) - v(i,j,k)
     &             + w(i  ,j  ,k+1) - w(i,j,k)
            else
               div = u(i+1,j  ,k  ) - u(i-1,j  ,k  )
     &             + v(i  ,j+1,k  ) - v(i  ,j-1,k  )
     &             + w(i  ,j  ,k+1) - w(i  ,j  ,k-1)
            endif

c     if divergence > zero goes to next cell
            if(div .gt. 0.0) goto 10

              dtot = ( d(i,j,k) + dm(i,j,k) )*d1
              tdyn  = sqrt(3.0*pi/32.0/G/dtot)
              tcool = cooltime(i,j,k)*t1

c     bypasses temp check if tempereature < 1.1e4 K
            if(temp(i,j,k) .lt. 1.1e4) then
c                write(6,*) 'bypassing temp check'
                goto 30
            endif

c       if cooling time is greater than dynamical time, goes to next cell
                if(tdyn .lt. tcool) then
c                 write(7,*) ' **** dt > t_dyn:',dt, tdyn
                  goto 10
                endif

 30          bmass = d(i,j,k)*dble(d1)*(dx*dble(x1))**3  
             tinybmass = dble(bmass) * 10.0**(-20)
             isosndsp = (sndspdC * dble(temp(i,j,k)) )**0.5
             jeanmass = dble(10.0**(-20.0))
     &                * dble(G**(-1.5) * (dble(d(i,j,k)) 
     &                * dble(d1))**(-0.5) * isosndsp**3
     &                * (1 + dm(i,j,k)/d(i,j,k))**(-1.5) )

c       goes to next cell if baryonic mass is less than jeans mass
             if(tinybmass .lt. jeanmass) then
c             write(6,*) 'too small - bmass < jeans mass'
c             write(6,*) 'bmass, jeanmass', tinybmass, jeanmass
             goto 10
             endif

c             write(6,*) 'bmass > jmass - test passed'
c             write(6,*) 'bmass, jmass   :', tinybmass, jeanmass

c        if mass of star is less than mass threshold, only creates star
c          if (some random #) < starmass/massthresh 
c          which should decrease number of very small mass stars
                starfraction = masseff*min(dt*t1/tdyn, 0.99)
                starmass = starfraction*bmass/msolar
c                write(6,*) 'starting threshhold check'
                if (starfraction .lt. 0.01) then
                write(6,*) 'star mass < 0.01 cell mass'
                goto 10
                endif

                if(starmass .lt. smthresh) then
                write(6,*) 'light:starmass,smthresh', starmass,smthresh
                   x = rand()
                    if(x .lt. (starmass / smthresh) ) then 
                       write(6,*) ' light but created'
                       goto 20
                     else
                       write(6,*) ' star particle not created'
                       goto 10
                    endif
                endif

c         if(starmass .lt. smthresh) then
c                write(6,*) 'starmass,smthresh', starmass,smthresh
c                goto 10
c         endif


 20             ii = ii + 1
 
                mp(ii)  = starfraction * d(i,j,k)
                tcp(ii) = t
                tdp(ii) = tdyn/t1
                xp(ii) = xstart + (float(i)+0.5)*dx
                yp(ii) = ystart + (float(j)+0.5)*dx
                zp(ii) = zstart + (float(k)+0.5)*dx
                up(ii) = u(i,j,k)
                vp(ii) = v(i,j,k)
                wp(ii) = w(i,j,k)

                d(i,j,k) = (1.0 - starfraction)*d(i,j,k)

         write(7+procnum,*) level,starmass,t*t1,d(i,j,k)*d1,temp(i,j,k)

 1000           format(i5,5(1pe10.3,1x))
 10          continue
           enddo
         enddo
      enddo

c      write(6,*) 'ii:   ', ii
c      write(6,*) 'nmax: ', nmax

      if(ii .gt. nmax) then
      write(6,*) '**** STOPPING: ii, nmax:', ii, nmax
      endif

      np = ii
      if(np .ne. 0) then
      write(6,*) 'Stars created: number,time,level: ', np, t, level
c      write(7,*) 'Stars created: number,time,level: ', np, t, level
      endif

c      write(6,*) 'leaving star maker'

#endif /* UNUSED */
      return
      end


c
c=======================================================================
c/////////////////////  SUBROUTINE STAR_FEEDBACK \\\\\\\\\\\\\\\\\\\\\\\
c
      subroutine star_feedback1(nx, ny, nz,
     &                      d, dm, temp, u, v, w,
     &                      dt, r, dx, t, z,
     &                      d1, x1, v1, t1,
     &                      nmax, xstart, ystart, zstart, ibuff,
     &                      xp, yp, zp, up, vp, wp,
     &                      mp, tdp, tcp,te,ge,idual)
#ifdef UNUSED
c
c  RELEASES "STAR" PARTICLE ENERGY
c
c  written by: Chris Loken
c  date:       3 March 1997
c  modified1:
c
c  INPUTS:
c
c    d     - density field
c    dm    - dark matter field
c    temp  - temperature field
c    u,v,w - velocity fields
c    r     - refinement field (0 if zone is further refined)
c    dt    - current timestep
c    dx    - zone size (code units)
c    t     - current time
c    z     - current redshift
c    d1,x1,v1,t1 - factors to convert d,dx,v,t to physical units
c    nx,ny,nz - dimensions of field arrays
c    ibuff    - number of buffer zones at each end of grid
c
c    x/y/z start - starting position of grid origin
c    xp,yp,zp - positions of created particles
c    up,vp,wp - velocities of created particles
c    mp       - mass of new particles
c    tdp      - dynamical time of zone in which particle created
c    tcp      - creation time of particle
c    nmax     - particle array size specified by calling routine
c    te,ge    - total energy, gas energy flags
c    idual    - dual energy flag
c
c-----------------------------------------------------------------------
       implicit none
c-----------------------------------------------------------------------
c
c  Arguments
c
      integer nx, ny, nz, ibuff, nmax, idual
      real   d(nx,ny,nz), dm(nx,ny,nz), temp(nx,ny,nz)
      real   u(nx,ny,nz), v(nx,ny,nz), w(nx,ny,nz)
      real   r(nx,ny,nz)
      real   dt, dx, t, z
      real   d1, x1, v1, t1
      real   xstart, ystart, zstart
      real   xp(nmax), yp(nmax), zp(nmax)
      real   up(nmax), vp(nmax), wp(nmax)
      real  mp(nmax), tdp(nmax), tcp(nmax)
      real  te(nx,ny,nz), ge(nx,ny,nz)
c
      integer i,nxt,nyt,nzt
      real bigconstant, tempup
      parameter (bigconstant = 1.4E8 )

c do loop goes over all particles, if the particle has a creation time 
c greater than zero, it is a star particle, so the temperature is 
c cranked up. 

        write(6,*) ' in star feedback function 1'

      do i=1,nmax

        write(6,*)  'looping in star feedback function'




        if(tcp(i) .NE. t) goto 10

          nxt = int( (xp(i) - xstart) / dx  ) 
            if(nxt .LT. 1) nxt = 1
            if(nxt .GT. nx) nxt = nx
          nyt = int( (yp(i) - ystart) / dx  ) 
            if(nyt .LT. 1) nyt = 1
            if(nyt .GT. ny) nyt = ny
          nzt = int( (zp(i) - zstart) / dx  ) 
            if(nzt .LT. 1) nzt = 1
            if(nzt .GT. nz) nzt = nz

c skips to next particle if this is not the most refined level

        if(r(nxt,nyt,nzt) .NE. 0.0) then
c           write(9,*) ' skipped this grid '
           goto 10
        endif
        write(6,*) 'star feedback:  it fed back'
c          tempup = ( mp(i) / d(nxt,nyt,nzt) ) * bigconstant
c          write(8,*) temp(nxt,nyt,nzt),tempup,dt*t1
c          write(8,*) ' i j k = ',nxt,nyt,nzt
c          temp(nxt,nyt,nzt) = temp(nxt,nyt,nzt) + tempup

 10     continue

      enddo

#endif /* UNUSED */
      return
      end
