========================================================================
ENZO README.config
========================================================================

   The configuration subsystem of Enzo is contained in the "config"
   subdirectory.  It is initialized using "./configure" from the
   top-level directory, and settings are controlled through "gmake"
   targets from any Enzo subdirectory containing source files.
   You must run "./configure" before doing anything else, and 
   should re-run it whenever you get an updated version of Enzo
   in case any Makefiles are changed.

========================================================================
Some useful configuration commands
========================================================================

   Enzo's Makefiles include a "help" target.  Typing "gmake help"
   should list some common commands recognized by the makefile system.

   For a summary of configuration-related commands recognized, type
   "gmake help-config".  This should list all known configuration
   commands, with default configuration settings marked by a "*".
   To reset the configuration to the default settings, type "gmake
   default".

   Two useful configuration commands are "gmake show-config" and
   "gmake show-flags".  Show-config will display a summary of the
   current configuration settings; show-flags will show you exactly
   what flags will be used when you compile Enzo.

========================================================================
Making and installing Enzo executables
========================================================================

   Once you have successfully configured Enzo (see sections on "adding
   a new architecture" and "adding a new machine" below), you should
   be able to compile Enzo by running "gmake" from the top-level
   directory, and install the executables in the bin directory by
   running "gmake install".  (If you only wish to compile or install
   a subset of the executables, you can "cd" down to the subdirectory
   containing the executables' source, and run "gmake; gmake install"
   from there.)

   After compiling and installing Enzo's executables, you can see if
   any were not compiled by typing "gmake list-missing" from the "bin"
   subdirectory".  If no executables are listed, compilation was
   successful.
   
   After compiling and installing Enzo's executables, the output of
   the "show-config" and "show-flags" will be stored in corresponding
   *.config and *.flags commands in the bin subdirectory along with
   the executable.


========================================================================
Adding a new architecture type
========================================================================

   The Make.arch.<architecture> files in the configuration directory
   are used to initialize configuration variables associated with a
   machine's general architecture type, but not machine-specific
   settings.  For example, compiler names, etc.  (Machine-specific
   settings *can* be included in a Make.arch.<architecture> file as
   well, since they will be overridden by settings in
   Make.mach.<machine> files.)

   Current arctitectures recognized by the Enzo configuration system
   include the following:

      alphaev68  Compaq Alpha-based architectures (e.g. PSC's TCS)
      i686       Intel Pentium-based architectures (e.g. NCSA's Xeon cluster)
      ia64       Intel Itanium-based architectures (e.g. TeraGrid clusters)
      mips       MIPS-based architectures (e.g. SGI Origin2000s)
      powerpc    IBM Power-based architectures (e.g. SDSC's Blue Horizon)
      sparc      SUN Sparc-based architectures
      x86_64     AMD Opteron-based architectures

   Your machine may already be included as one of these types.  To
   find out, after running "./configure" from the top-level directory,
   type "gmake show-config".  If the "Architecture:" field is not
   blank, then your architecture is recognized by Enzo.  This means
   you don't have to add a new architecture file, and can continue
   with the "Adding a new machine" section below.

   However, if it *is* blank, then you should add a new
   Make.arch.<architecture> file corresponding to your machine.  The
   first step in adding a new architecture file is to find out what to
   name it.  This should be easy, because "./configure" will
   automatically create an empty Make.arch.<architecture> file for you
   if one doesn't already exist.  It will be a zero-sized file, and
   will be symbolically linked to the "Make.arch" file.  Type "ls -l
   Make.arch" from the "config" subdirectory to find out the file
   name.

   The easiest way to create a new architecture file is to pick an
   existing Make.arch.* file, preferably one that's "close" to your
   architecture, and copy it to the zero-sized
   Make.arch.<architecture> file for your machine, editing the
   Makefile variables accordingly.

   You should also set TEXT_ARCH to be $(TEXT_ARCH_<ARCHITECTURE>),
   and add a short one-line description of the architecture to the
   "Make.text" file in the "config" subdirectory.  You can verify that
   the description is recognized by running the "gmake show-config"
   command.  The "Architecture: " field should now contain your
   architecture's description.

========================================================================
Adding a new machine
========================================================================

   The Make.mach.<machine> files in the configuration directory are
   used to initialize configuration variables associated with your
   specific machine, but which are not associated with your
   architecture.  For example, the locations of HDF and

   The easiest way to add a new machine is to create a
   "Make.mach.<machine>" file in the "config" subdirectory containing
   configuration settings for your particular machine.  You may want
   to copy the settings in a similar Make.mach.<machine> file, then
   edit the gmake variable values to correspond to those required by
   your machine.

   After creating the file, type "gmake mach-<machine>" to activate the
   settings.  You can type "gmake show-flags" to verify that any
   compile or link settings in your new machine configuration file are
   indeed recognized by the Enzo configuration.

   If you want your machine to be recognized when you type "gmake
   show-config", add a "TEXT_MACH_<MACHINE>" line to the beginning of
   your Make.mach.<machine> file, and a corresponding description to
   the Make.text file.

   If you want your machine to be automatically recognized, so that
   you don't have to explicitly type "gmake mach-<machine>" after
   running ./configure or "gmake default", you can edit the "gethost"
   script in the top-level "bin" subdirectory.  You will need your IP
   address, which can be obtained by running the "getip" script also
   in the bin directory.  The label you use in gethost must match the
   suffix you used for the Make.mach.<machine> file.

========================================================================
Configuration settings
========================================================================

------------------------------------------------------------------------
Architecture selection
------------------------------------------------------------------------

   Architectures should be detected automatically by "./configure".
   However, if you really want to, you can override the automatically-detected
   architecture using a "gmake arch-<architecture>" command.  Currently
   supported architectures include the following:

      gmake arch-alphaev68    DEC Alpha
      gmake arch-i686         Intel Pentium
      gmake arch-ia64         Intel Itanium
      gmake arch-mips         MIPS SGI
      gmake arch-powerpc      IBM PowerPC
      gmake arch-sparc        SUN UltraSPARC
      gmake arch-x86_64       AMD Opteron-based architectures

   For information on adding a new architecture, see the section
   "Adding a new architecture type" above.

------------------------------------------------------------------------
Specific machine selection
------------------------------------------------------------------------

   Machines can be detected automatically by "./configure" if the
   "bin/gethost" file recognizes the machine's IP address. 

      gmake mach.copper     NCSA IBM p690 "copper"
      gmake mach.cosmos     LCA's SUN server "cosmos"
      gmake mach.diapason   Bordner's Pentium4 laptop
      gmake mach.ds-sdsc    SDSC's IBM p690 "DataStar"
      gmake mach.gnu        Use GNU compilers (Warning: only single precision!)
      gmake mach.horizon    SDSC's IBM SP "Blue Horizon"
      gmake mach.nordlys    Bordner's Pentium4 desktop
      gmake mach.tg-ncsa    NCSA TeraGrid cluster
      gmake mach.tg-sdsc    SDSC TeraGrid cluster
      gmake mach.tungsten   NCSA Xeon cluster "tungsten"
      gmake mach.unknown    "Generic" machine: only use architecture settings

   If the machine is not recognized, then "unknown" is used.

------------------------------------------------------------------------
MPI library
------------------------------------------------------------------------

   Usually Enzo is run on parallel machines using MPI for parallelism.
   However, it can also be run without MPI.
   
      gmake mpi-off           Off
    * gmake mpi-on            On

------------------------------------------------------------------------
jbPerf/jbMem support
------------------------------------------------------------------------

   Enzo can collect performance data using jbPerf or MPE, or memory
   usage data using jbMem.  They may add a little bit to the run time,
   but usually not more than 10% or so.  The default is to leave
   performance monitoring off, but may be changed to perf-jbperf in
   the near future.

    * gmake perf-off          Off
      gmake perf-jbperf       jbPerf
      gmake perf-jbmem        jbMem
      gmake perf-mpe          MPE

------------------------------------------------------------------------
I/O library
------------------------------------------------------------------------

   HDF5 is the I/O library of choice, but legacy support for HDF4 is
   still available for the Enzo executable.  Note that analysis
   and other executables *only* support HDF5.

      gmake io-hdf4           HDF4
    * gmake io-hdf5           HDF5

------------------------------------------------------------------------
Global precision
------------------------------------------------------------------------

   The global precision can be set to either double (64-bits) or
   single (32-bits).  The default global precision is double.  Note that
   only single precision is available with GNU compilers, due to
   limitations in the GNU Fortran compiler

      gmake precision-single  Single
    * gmake precision-double  Double

------------------------------------------------------------------------
Particles precision
------------------------------------------------------------------------

   For runs with many AMR levels, the precision used for storing
   particle positions may need to be increased.  The "particle
   precision" should be at least as great as the global precision (see
   above), and can be as high as "quad precision" (128-bits).  Note
   that no checking is done to ensure the particle precision is at
   least as great as the global precision!  The default particles
   precision is double.

      gmake particles-quad    Quad
    * gmake particles-double  Double
      gmake particles-single  Single

------------------------------------------------------------------------
Object files type
------------------------------------------------------------------------

   For 64-bit architectures that also support 32-bit object files,
   the "obj-" settings are used to select between 32-bit and 64-bit
   object files.  For 32-bit architectures, and 64-bit architectures
   that do not support 32-bit object files, these settings are ignored.
   The default is 64-bit object files.

      gmake obj-32            32-bit objects
    * gmake obj-64            64-bit objects

------------------------------------------------------------------------
Optimization level
------------------------------------------------------------------------

   Several different optimization levels are available, which combine
   different levels of compiler warnings, debugging support, and
   optimization.  The default is "high", which includes both a high
   (but not "aggressive") optimization level, and debug support.
   
      gmake opt-warn          Debug + Optimize + Warn
      gmake opt-check         Check + Debug
      gmake opt-debug         Debug
    * gmake opt-high          Debug + Optimize
      gmake opt-aggressive    Aggressive

------------------------------------------------------------------------
FFT
------------------------------------------------------------------------

   Enzo currently contains (at least) two FFT routines for gravity
   calculations on the coarse grid, and in the "inits" initial conditions
   utility.  The recommended FFT is "fft-F90", since it is faster
   and supports non-powers of two.  fft-F77 is also supported for
   legacy support, or if a F90 compiler is not available.  LCA's
   cosmos machine only works with fft-F77.

      gmake fft-F77           Numerical Recipes FFT
    * gmake fft-F90           F90 FFT

------------------------------------------------------------------------
Code optimizations
------------------------------------------------------------------------

   The "jbopt-" configuration settings will be used for swapping in
   and out sections of optimized code for comparing whether the
   optimizations actually help.  Currently, this setting is ignored,
   but is included for future use.

      gmake jbopt-off         Off
      gmake jbopt-beta        Beta (includes un-tested optimizations)
    * gmake jbopt-on          On (excludes un-tested optimizations)

------------------------------------------------------------------------
Test suite hooks
------------------------------------------------------------------------

   The "test-" configuration settings are used primarily by the 
   Enzo Test Suite, to control the display of debugging information.
   The default is "test-off"
   

    * gmake test-off          Off
      gmake test-on           On

========================================================================
Conclusion
========================================================================

Enzo's configuration subsystem was written by James Bordner.  For
questions or comments, feel free to contact James directly at
jbordner@cosmos.ucsd.edu, or through the Enzo User Listserv.  For
information on subscribing to the listserv, see the Enzo website at
http://cosmos.ucsd.edu/enzo.

========================================================================

James Bordner (jbordner@cosmos.ucsd.edu)
Enzo Development Group
Laboratory for Computational Astrophysics
University of California, San Diego
