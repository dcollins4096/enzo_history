*****************************************************************************
*                                                                           *
* Copyright 2004 Greg Bryan                                                 *
* Copyright 2004 Laboratory for Computational Astrophysics                  *
* Copyright 2004 Board of Trustees of the University of Illinois            *
* Copyright 2004 Regents of the University of California                    *
*                                                                           *
* This software is released under the terms of the "Enzo Public License"    *
* in the accompanying LICENSE file.                                         *
*                                                                           *
*****************************************************************************

c=======================================================================
c
c Set the current radiation density (incl. massless neutrinos) for h=1
c
c#define OMEGA0_RAD 4.22e-5
#define OMEGA0_RAD 0.0
c
c=======================================================================
c//////////////////////  FUNCTION COMPUTE_TIME  \\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_time(aye_temp)
c
c  COMPUTES THE TIME GIVEN THE EXPANSION FACTOR
c
c  written by: Greg Bryan
c  date:       February, 1992
c
c  PURPOSE:  
c
c  INPUTS:
c
c  OUTPUTS:
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
#include "cosmo.h"
c
      real aye_temp, time_temp, dtda, midpnt
c
      external dtda, midpnt
c
c-----------------------------------------------------------------------
c
      call qromo(dtda, 0.0, aye_temp, time_temp, midpnt)
      calc_time = time_temp
c
      return
      end

c=======================================================================
c/////////////////////////  FUNCTION DADT  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_ayed(aye_temp)
c
      real dtda
c
      calc_ayed = 1.0/dtda(aye_temp)
c
      return
      end


c=======================================================================
c////////////////////////  FUNCTION D2A/DT2  \\\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_ayedd(aye_temp)
c
      implicit none
#include "cosmo.h"
c
      real aye_temp, omega0_rad, omega0_mrad
c
      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad
c
      calc_ayedd = aye_temp*(lam0 - 0.5*omega0_mrad/(aye_temp*uaye)**3
     &                            -     omega0_rad /(aye_temp*uaye)**4)
c
c     Convert to code units (the factors of H_0 have already been cancelled)
c
     &       /(sqrt(3.0/2.0*omega0)*(1.0+zri)**1.5)**2
c
      return
      end

c=======================================================================
c/////////////////////////  FUNCTION DTDA  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function dtda(aye_temp)
c
c  COMPUTES THE VALUE OF DT/DA, GIVEN A
c
c  written by: Greg Bryan
c  date:       February, 1992
c
c  PURPOSE:  
c
c  INPUTS:
c
c  OUTPUTS:
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
#include "cosmo.h"
c
      real aye_temp, at2, omega0_rad, omega0_mrad
c
c-----------------------------------------------------------------------
c
c     We include the (small) effect of radiation (Peebles 6.80)
c
      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad
c
c     Convert aye from code units
c
      at2 = aye_temp*uaye
c
c     Compute dt/da (Peebles1993, p. 312)
c
      dtda = 1.0/sqrt(omega0_mrad/at2 + omega0_rad/at2**2 +
     &                lam0*at2**2 + 1.0 - lam0 - omega0)
c
c     Convert to code units (the factors of H_0 have already been cancelled)
c
     &       *sqrt(3.0/2.0*omega0)*(1.0+zri)**1.5 * uaye
c
      return
      end


c=======================================================================
c////////////////////////  FUNCTION CALC_AYE  \\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_aye(time_temp)
c
c  COMPUTES THE EXPANSION FACTOR GIVEN THE TIME
c
c  written by: Greg Bryan
c  date:       February, 1992
c
c  PURPOSE:  
c
c  INPUTS:
c
c  OUTPUTS:
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
#include "cosmo.h"
c
c     arguments
c
      real time_temp
c
c     locals
c
      real    aye_temp, aye_old, calc_time, dtda, tfinal, tfromfinal
      integer i
c
c     parameters
c
      integer niter
      real    tolerance
      parameter (niter = 10, tolerance = 1.0e-5)
c
c-----------------------------------------------------------------------
c
c     Make an initial guess based on Taylor expansion (i.e. use q0)
c
      tfinal = calc_time(1.0+zri)
      tfromfinal = sqrt(2.0/3.0/omega0)*(1.0+zri)**(-1.5) * 
     &             (tfinal - time_temp)
      aye_temp = (1.0+zri)*(1 - tfromfinal - 
     &                 0.5*(0.5*omega0 - lam0)*tfromfinal**2)
c
c     Do a Newton-Raphson iteration
c
      do i = 1, niter
         aye_old = aye_temp
         aye_temp = aye_old + 1.0/dtda(aye_old) *
     &                        (time_temp - calc_time(aye_old))
         if (abs(aye_old-aye_temp)/aye_temp .lt. tolerance) goto 100
      enddo
      write(6,*) 'NR in calc_aye failed.'
      stop
c
c     Done
c
 100  continue
      calc_aye = aye_temp
c
      return
      end


c=======================================================================
c/////////////////////////  FUNCTION CALC_F  \\\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_f(aye_temp)
c
c  COMPUTES THE FUNCTION D LOG (DELTA_PLUS) / D LOG (AYE)
c
c  written by: Greg Bryan
c  date:       February, 1995
c
c  PURPOSE:  
c
c  INPUTS:
c
c  OUTPUTS:
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
#include "cosmo.h"
c
c     arguments
c
      real aye_temp
c
c     locals
c
      real ayed, ayedd, sum, at2
c
      real fhelper, calc_ayed, calc_ayedd, midpnt
      external fhelper, midpnt
c
c-----------------------------------------------------------------------
c
c     We calculate f(z) through PEEBLES93, eq 13.81:
c
c     f = ayedd*aye/ayed^2 - 1 + 1 / (a^2 E^3 G)
c
c        where G = int(z to infifinty) (1+z)/E(z)^3 dz
c                = int(0 to a) da/(E(a) * a)^3
c              E = da/dt / H_0 
c
c     Compute G (using the usual a convention)
c
      at2 = aye_temp*uaye
      call qromo(fhelper, 0.0, at2, sum, midpnt)
c
      ayed = calc_ayed(aye_temp)
      ayedd = calc_ayedd(aye_temp)
c
c     Note that f is dimensionless, specifically all the unusual aye
c      convention (a=1 at z=zri) cancels for the first term.  The third
c      term is computed entirely in the usual convention.
c
      calc_f = ayedd*aye_temp/ayed**2 - 1.0 + at2*fhelper(at2)/sum
c
      return
      end

c=======================================================================
c/////////////////////////  FUNCTION FFUNC  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
c
      real function fhelper(at2)
c
      implicit none
#include "cosmo.h"
c
c     returns the function 1/(a * E)^3  
c       (where, here only, a is not aye, i.e. it obeys the usual convention
c        of a = 1 at z = 0)
c
      real E, at2, omega0_rad, omega0_mrad
c
c-----------------------------------------------------------------------
c
      omega0_rad = OMEGA0_RAD*hub**(-2)
      omega0_mrad = omega0 - omega0_rad
c
      E = sqrt(omega0_mrad/at2**3 + (1.0 - omega0 - lam0)/at2**2 + 
     &         lam0 + omega0_rad/at2**4)
c
      fhelper = 1.0/(at2*E)**3
c
      return
      end


c=======================================================================
c///////////////////////  FUNCTION CALC_GROWTH  \\\\\\\\\\\\\\\\\\\\\\\\
c
      real function calc_growth(z1)
c
c  COMPUTES THE GROWTH FUNCTION D(z), NORMALIZED AT HIGH REDSHIFT
c
c  written by: Greg Bryan
c  date:       February, 1995
c
c  PURPOSE:
c    Note: this function is _not_ normalized to D(z=0) = 1
c
c  INPUTS:
c    z      - redshift function is to be evaluated at
c    omega0 - matter density ratio at z=0
c    omega_lam - \Lambda/(3*H_0^2) at z=0
c
c  OUTPUTS:
c    calc_growth - linear growth, normalized to 1/(1+z) at z=infinity
c
c-----------------------------------------------------------------------
c
      implicit NONE
c
c     arguments
c
      real z1
c
c     locals
c
      real a, sum, E
c
c     externals
c
      real fhelper, midpnt
      external fhelper, midpnt
c
c     commons
c
#include "cosmo.h"
c
c-----------------------------------------------------------------------
c
c     We calculate D(z) through PEEBLES93, eq 13.78:
c
c     D(z) = E(z) * G(z)
c
c        where G = 5*omega0/2 * int(z to infinity) (1+z)/E(z)^3 dz
c                = 5*omega0/2 * int(0 to a) da/(E(a) * a)^3
c              E = da/dt / H_0
c
c     Compute G, missing the prefactor
c
      a = 1.0/(1.0+z1)
      call qromo(fhelper, 1.0e-10, a, sum, midpnt)
c
      E = sqrt(omega0/a**3 + (1.0 - omega0 - lam0)/a**2 + lam0)
c
      calc_growth = 5.0*omega0/2.0 * sum * E
c
      return
      end





c=======================================================================
c/////////////////////  SUBROUTINE SET_COMMON  \\\\\\\\\\\\\\\\\\\\\\\\\
c
      subroutine set_common(lam0_in, omega0_in, zri_in, hub_in)
c
      implicit none
#include "cosmo.h"
c
      real lam0_in, omega0_in, zri_in, hub_in
c
c-----------------------------------------------------------------------
c
      lam0   = lam0_in
      omega0 = omega0_in
      zri    = zri_in
      hub    = hub_in
      uaye   = 1.0/(1.0 + zri)
c
      return
      end
