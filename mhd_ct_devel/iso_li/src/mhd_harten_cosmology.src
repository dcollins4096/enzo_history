c#include "fortran.def"
c#include "error.def"
c#define tiny 1.0e-20
#define USESTRANG
      
      subroutine mhd_harten_cosmology(d, e, vx, vy, vz, 
     +     bxc, byc, bzc, 
     +     gravityon, gr_ax,gr_ay,gr_az,
     +     fx1, fy1, fz1,
     +     fx2, fy2, fz2,
     +     fd, fe, fvx, fvy, fvz, 
     +     fluxextents, totalfluxsize, nsubgrids,
     +     dx, dy, dz, idim, jdim, kdim,
     +     i1, i2, j1, j2, k1, k2, dt, gamma,
     +     nhy, rank, level, grid, Hack2d,
     +     a, idual, ge,idiff,
     +     premin)
  
      implicit none
c     
c     arguments
c     
      
      integer idim, jdim, kdim, level, grid, gravityon
      integer i1, i2, j1, j2, k1, k2, nhy, rank, Hack2d
      integer totalfluxsize, nsubgrids
      integer fluxextents(3,3,2,2,nsubgrids)
      real dx, dy, dz
      real dt, gamma
      
      real d(idim,jdim,kdim), e(idim,jdim,kdim)
      real vx(idim,jdim,kdim), vy(idim,jdim,kdim), vz(idim,jdim,kdim)
      real bxc(idim,jdim,kdim),byc(idim,jdim,kdim),bzc(idim,jdim,kdim)
      real gr_ax(idim,jdim,kdim),gr_ay(idim,jdim,kdim),
     +     gr_az(idim,jdim,kdim)
      real fx1(idim+1,jdim,kdim),fx2(idim+1,jdim,kdim),
     +     fy1(idim,jdim+1,kdim),fy2(idim,jdim+1,kdim),
     +     fz1(idim,jdim,kdim+1),fz2(idim,jdim,kdim+1)
      real fd(totalfluxsize), fe(totalfluxsize), fvx(totalfluxsize),
     +     fvy(totalfluxsize), fvz(totalfluxsize)
c    hx     
      real a(0:3)  
      integer  idual,idiff
      real ge(idim,jdim,kdim)
      real premin,temp

c     
c     internal variables
c     
      integer i,j,k, dim, coord, face, s, dummy
      integer SizeOtherSubgrids(nsubgrids+1), sizeofface, sizeofsubgrid
      integer SizeOtherDims(3+1,nsubgrids), TotalOffset(3,nsubgrids)
      integer ixyz, n, retard1, retard2, output, strang, nhyt
      integer is, ie, js, je, ks, ke, na, increment, mmm
      integer fdim(3,3,nsubgrids), index
c   hx, changed dimension to 14, new one for the pressure, other twos for acceleration fields     
      real wx(idim,14), wy(jdim,14), wz(kdim,14), dtstrang
      real dtdx,dtdy, dtdz
      real fluxx(idim, 7), fluxy(jdim,7), fluxz(kdim,7)
      integer correct(3,2)
      integer onlyx, nstart, nend, side, verb
      real tiny 
      real divv(idim,jdim,kdim),c(idim,jdim,kdim)
      real ge_temp(idim,jdim,kdim)
      real diffd1(idim,jdim,kdim)
      real diffd2(idim,jdim,kdim)
      real diffd3(idim,jdim,kdim)
      real eta1,eta2,eta3
      logical justpre
      integer fcinb
      integer iflag(0:5,3),nmod
     
c      Hack2d=1
       

      
      tiny = 1.0d-20
      eta1 = 0.08
      eta2 = 3.0
      eta3 = 0.0
      justpre = .false.
     
#ifdef USESTRANG
      iflag(0,1) = 1
      iflag(0,2) = 2
      iflag(0,3) = 3
      iflag(1,1) = 3
      iflag(1,2) = 2
      iflag(1,3) = 1
      iflag(2,1) = 2
      iflag(2,2) = 3
      iflag(2,3) = 1
      iflag(3,1) = 1
      iflag(3,2) = 3
      iflag(3,3) = 2
      iflag(4,1) = 3
      iflag(4,2) = 1
      iflag(4,3) = 2
      iflag(5,1) = 2
      iflag(5,2) = 1
      iflag(5,3) = 3      
      nmod = mod(nhy,6)
#endif 

      verb = 2

      side = -1

c  Preprocess B field, B=B/sqrt(a), and magnetic flux, for comoving coordinate
      temp = 1.0/sqrt(a(0))
      do i=1,idim
        do j=1,jdim
          do k=1,kdim
           e(i,j,k) = e(i,j,k) -
     +       0.5*(bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
           bxc(i,j,k) = bxc(i,j,k)*temp
           byc(i,j,k) = byc(i,j,k)*temp
           bzc(i,j,k) = bzc(i,j,k)*temp
           e(i,j,k) = e(i,j,k) +
     +       0.5*(bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
          enddo
        enddo
      enddo

      
c hx compute gas pressure from gas energy      
      if(idual .eq. 1) then
       do i=1,idim
         do j=1,jdim
           do k= 1,kdim
c           gr_ay(i,j,k) = 0.0
c           gr_az(i,j,k) = 0.0 
           ge(i,j,k) =  ge(i,j,k)*(gamma-1.0)*d(i,j,k)
           enddo
          enddo
        enddo
        if(.false.) then
       j=10
       i=8
       do k=1,kdim
       write (*,*) k,e(i,j,k),(gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     + +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)),d(i,j,k),vx(i,j,k)
c     + ,bxc(i,j,k),byc(i,j,k)
c        write (*,*) gr_ax(i,j,k),gr_ay(i,j,k),gr_az(i,j,k)
       enddo
       endif
       endif

c hx gravitational step 
c      if(gravityon .eq. 1) then
c        do i = is,ie
c         do j = js ,je
c           do k = ks, ke
c           e(i,j,k) = e(i,j,k) - 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +               +vy(i,j,k)**2+vz(i,j,k)**2)
c           vx(i,j,k) = vx(i,j,k) + dt*gr_ax(i,j,k)*0.5
c           vy(i,j,k) = vy(i,j,k) + dt*gr_ay(i,j,k)*0.5
c           vz(i,j,k) = vz(i,j,k) + dt*gr_az(i,j,k)*0.5
c           e(i,j,k) = e(i,j,k) + 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +               +vy(i,j,k)**2+vz(i,j,k)**2)
c           enddo
c         enddo
c        enddo
c      endif


     
c     this is for debugging.
      do dim=1,3
         do face=1,2
            correct(dim,face)=1
         enddo
      enddo

      output = 0
      dummy=0
      if(nsubgrids .eq. 2 ) then
         dummy =10
      endif

c     --- 
c     --- Generate the flux dimensions and offset for the flux index.
c     --- This is the map from the one dimensional array passed in to the fortran to the 
c     --- many dimensional, non-rectangular array that the actual flux correction needs.
c     --- 

      sizeothersubgrids(1) = 0
      
      do s=1,nsubgrids
         sizeofsubgrid=0
         SizeOtherDims(1,s)=0
         
         do dim = 1,3

            sizeofface = 1
            
            do coord=1,3
               
               fdim(dim, coord, s)=
     +              fluxextents(dim,coord,1,2,s)-
     +              fluxextents(dim,coord,1,1,s)+1
               
c     the two is for Left and Right fluxes.
               sizeofface = 2*sizeofface*fdim(dim,coord,s)
               
            enddo

            sizeofsubgrid = sizeofsubgrid+sizeofface
            SizeOtherDims(dim+1,s)=SizeOtherDims(dim,s)+sizeofface

         enddo

         sizeothersubgrids(s+1)=sizeothersubgrids(s)+sizeofsubgrid

c -------- this is what we're actually after.
c -------- I recognize that there are some redundancies in the preceeding.  
c -------- I opted for clarity over cleverness. (if this comment is confusing, ignore it.)

         do dim=1,3
           TotalOffset(dim,s)=SizeOtherDims(dim,s)+SizeOtherSubgrids(s)
         enddo

      enddo

c     end of sub-crap -------------------

c      open(unit=700,file='file.X0',status='unknown',position='append')
c      open(unit=710,file='file.X1',status='unknown',position='append')
c      open(unit=701,file='file.Y0',status='unknown',position='append')
c      open(unit=711,file='file.Y1',status='unknown',position='append')
c      open(unit=702,file='file.Z0',status='unknown',position='append')
c      open(unit=712,file='file.Z1',status='unknown',position='append')


 800  format(10f9.5)
      
      is = 1      
      ie = idim
      js = 1
      je = jdim
      ks = 1
      ke = kdim
      

      if( Hack2d .eq. 1 ) then
         ks=3
         ke=kdim-2
         write(*,*) " Kdim ", kdim, "sweep (", ks, ",", ke,")"

      endif
      nhyt = nhy
      
c     if( kdim .eq. 12 ) then
c     c         nhyt = nhyt + 2
c     endif
      
      ixyz = mod(nhyt,rank)
      

c     This strang business is an experiment.  It doesn't work.  
c      dtstrang = dt/2.0      
      dtstrang = dt
      dtdx = dtstrang/dx
      dtdy = dtstrang/dy
      dtdz = dtstrang/dz

#ifdef USESTRANG
      strang = 0 
#else
      do strang = 0,0
#endif         
         if (strang .eq. 0 ) then
            nstart = ixyz
            nend = ixyz+rank-1
            increment = 1
         else 
            nstart = ixyz+rank-1
            nend = ixyz
            increment = -1
         endif
         
c     onlyx = 0
c     if(onlyx .eq. 1 ) then
c     c     side is zero based.
c     if( idim .eq. 12 ) side = 2
c     if( jdim .eq. 12 ) side = 0
c     if( kdim .eq. 12 ) side = 1
c     nstart = side
c     nend = side
c     endif
         
c     
c     Loop over all 3 directions.
c     
         
#ifdef USESTRANG
       n=1
 704  continue
      if (n.ge.4) goto 705
      if (iflag(nmod,n).eq.1) then
         goto 701
      elseif (iflag(nmod,n).eq.2) then
         goto 702
      elseif (iflag(nmod,n).eq.3) then
         goto 703
      else
         goto 705
      endif    
#else
      do n=nstart, nend, increment
#endif
 

c     
c     X sweep
c     

#ifdef USESTRANG
 701  continue       
#else
      if (mod(n,rank) .eq. 0) then
#endif        
            na = idim - 4

            if(verb.eq.1)write(*,*) "x step "

            dim=1

            do k=ks, ke
            do j=js, je
                  
            do i=1,idim
                     
c     Note: This solver takes momentum, not velocity.

               wx(i,1)=d(i,j,k)
               wx(i,2)=vx(i,j,k)*d(i,j,k)
               wx(i,3)=vy(i,j,k)*d(i,j,k)
               wx(i,4)=vz(i,j,k)*d(i,j,k)
               wx(i,5)=bxc(i,j,k)
               wx(i,6)=byc(i,j,k)
               wx(i,7)=bzc(i,j,k)
               wx(i,8)=e(i,j,k)
               wx(i,9)=0.0
               wx(i,10)=0.0
c  hx, compute the pressure from gas energy               
              if(idual .eq. 1) wx(i,12)=ge(i,j,k)
              
              if( gravityon .eq. 1 ) then
               wx(i,11) = gr_ax(i,j,k)
               wx(i,13) = gr_ay(i,j,k)
               wx(i,14) = gr_az(i,j,k)
              endif


               do mmm=1,7
                  fluxx(i,mmm) = -666.123
               enddo

c               do mmm=1,10
c                  if( wx(i,mmm) .ne. wx(i,mmm) ) then
c                     write(*,*) "SHIT! failure, beginning of x"
cc                     ERROR_MESSAGE
c                  endif
c               enddo               

               if(output .eq. 1) then
                  write(700,800) wx(i,1),wx(i,8),wx(i,2),wx(i,3),
     +                 wx(i,4),wx(i,5),wx(i,6),
     +                 wx(i,7),wx(i,9), wx(i,10)
               endif
            enddo
            
           if(idual .eq. 1) then
           call mhdtvd_es(dtstrang, dx, na, wx, fluxx, gamma, gravityon,
     +	               premin, tiny, a)  
           else
           call mhdtvd_cosmology(dtstrang, dx, na, wx, fluxx, gamma,
     +       gravityon,premin, tiny, a)  
           endif     

            do i=is,ie

               if(output .eq. 1 ) then
                  write(710,800) wx(i,1),wx(i,8),wx(i,2),wx(i,3),
     +                 wx(i,4),wx(i,5),wx(i,6),
     +                 wx(i,7),wx(i,9), wx(i,10)
               endif
               
               d(i,j,k) = wx(i,1)
               vx(i,j,k) = wx(i,2)/d(i,j,k)
               vy(i,j,k) = wx(i,3)/d(i,j,k)
               vz(i,j,k) = wx(i,4)/d(i,j,k)
               bxc(i,j,k) = wx(i,5)
               byc(i,j,k) = wx(i,6)
               bzc(i,j,k) = wx(i,7)
               e(i,j,k) = wx(i,8)
c  hx, compute gas energy from pressure
           if(idual .eq. 1) ge(i,j,k)=wx(i,12)            
               
c
c     fill the flux array for SubgridFluxCorrection.
c

c     fluxextents(dim,coord,face,n,s)

c     dim=1 is set at the beginning of the sweep.

               do s=1, nsubgrids

                  do face=1,2
                     if( i .eq. fluxextents(dim,1,face,1,s) 
     +                .and. (j .le. fluxextents(dim,2,face,2,s))
     +                .and. (j .ge. fluxextents(dim,2,face,1,s))
     +                .and. (k .le. fluxextents(dim,3,face,2,s))
     +                .and. (k .ge. fluxextents(dim,3,face,1,s))
     +                .and. (correct(dim,face) .eq. 1)    ) then
                        
c     effective indexing: flux(i,j,k,dimension, face, subgrid)
c     I'm afraid this may cause cache misses.  If you come up with a better
c     way, please let me know.

                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array",
c     +                      index, totalfluxsize, "(",i,j,k,s,face,
c     +                      ")[",fdim(1,1,s), fdim(1,2,s), fdim(1,3,s),
c     +                      "]",sizeothersubgrids(s), 
c     +                      + i - fluxextents(1,1,face,1,s)
c     +                      + fdim(1,1,s)*(j- fluxextents(1,2,face,1,s)
c     +                      + fdim(1,2,s)*(k- fluxextents(1,3,face,1,s)
c     +                      + fdim(1,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxx(i-1,mmm)=0.1
c1000*j+10*mmm+face
                        enddo
                        

                        fd(index)  = fd(index) +dtdx*fluxx(i-1,1)
                        fvx(index) = fvx(index)+dtdx*fluxx(i-1,2)
                        fvy(index) = fvy(index)+dtdx*fluxx(i-1,3)
                        fvz(index) = fvz(index)+dtdx*fluxx(i-1,4)
                        fe(index)  = fe(index) +dtdx*fluxx(i-1,7)

c for ES code, no flux correction of energy,xh
                     if(idual .eq. 2) fe(index)	 = 0.0

c                        do mmm=1,7
c                           if( fluxx(i-1,mmm) .ne. fluxx(i-1,mmm)) then
c                              write(*,*) "SHIT! Flux Failure x, ijkflg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               
               
            enddo
            
c     The difference in indexing comes from a difference
c     in variable definition
            
            do i=is+1, ie
               fx1(i,j,k) = fx1(i,j,k) + wx(i-1,9)
               fx2(i,j,k) = fx2(i,j,k) + wx(i-1,10)
            enddo
            
         enddo
      enddo

      if(idual .eq. 2) then
      j=4
      k=4
      do i=is+2,ie-2
        write(*,*) ge(i,j,k),fcinb(i-1,idim),fcinb(i+1,idim),
     + abs(ge(fcinb(i-1,idim),j,k)-ge(fcinb(i+1,idim),j,k)),
     + abs(ge(fcinb(i-1,idim),j,k)-ge(fcinb(i+1,idim),j,k))/
     + ge(i,j,k)
      enddo
      write (*,*) 
      endif
      
c xh Choose whether to implement the S system
      if(idual .eq. 1) then
        call mhdtvd_es_switches(is,ie,js,je,ks,ke,
     + idim,jdim,kdim,dx,dy,dz,d,vx,vy,vz,
     + bxc,byc,bzc,ge,e,gamma,premin,1)
      endif
      if(idual .eq.2) then
        do j=js,je
         do k=ks,ke
           do i=is,ie
      divv(i,j,k)=vx(fcinb(i+1,idim),j,k)
     +  -vx(fcinb(i-1,idim),j,k) +dx*(vy(i,fcinb(j+1,jdim),k)
     + -vy(i,fcinb(j-1,jdim),k))/dy +dx*(vz(i,j,fcinb(k+1,kdim))
     + -vz(i,j,fcinb(k-1,kdim)))/dz
      c(i,j,k)= sqrt(max(0.0,gamma*ge(i,j,k)/d(i,j,k)+
     +  (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)/d(i,j,k)))
      ge_temp(i,j,k) = ge(i,j,k)
           enddo
         enddo
       enddo

       do j=js,je
         do k=ks,ke
           do i=is+2,ie-2
         if((ge(i,j,k)/(gamma-1.0) .lt. eta1*e(i,j,k)) .and.
c        if( (e(i,j,k)-0.5*(vx(i,j,k)**2
c     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
c     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)) .lt. 
c     +  eta1*e(i,j,k) .and. 
     + ((divv(i,j,k) .gt. -eta3*max(c(i,j,k),c(fcinb(i+1,idim),j,k),
     + c(fcinb(i-1,idim),j,k),c(i,fcinb(j+1,jdim),k),
     +  c(i,fcinb(j-1,jdim),k),
     +  c(i,j,fcinb(k+1,kdim)),c(i,j,fcinb(k-1,kdim)))) .or.
     + (abs(ge_temp(i+1,j,k)-ge_temp(i-1,j,k))
     +  +abs(ge_temp(i,fcinb(j+1,jdim),k)-ge_temp(i,fcinb(j-1,jdim),k))
     + +abs(ge_temp(i,j,fcinb(k+1,kdim))-ge_temp(i,j,fcinb(k-1,kdim)))
     + .lt. eta2*min(ge_temp(i,j,k), ge_temp(i+1,j,k),ge_temp(i-1,j,k)
     +  ,ge_temp(i,fcinb(j+1,jdim),k),ge_temp(i,fcinb(j-1,jdim),k)
     +  ,ge_temp(i,j,fcinb(k+1,kdim)),ge_temp(i,j,fcinb(k-1,kdim)))))
     + .or. justpre 
c     + .or. ge(i,j,k) .ge. (gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
c     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5* 
c     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)) 
     +  )then
       ge(i,j,k)=max(premin,ge(i,j,k))
       e(i,j,k)=ge(i,j,k)/(gamma-1.0)+0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)+0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
       else
       ge(i,j,k) = (gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2))
       ge(i,j,k)=max(premin,ge(i,j,k))
       endif
           enddo
         enddo
       enddo      
       endif 

       if(idual .eq. 2) then
     
        do j=js,je
         do k=ks,ke
           do i=is,ie
      divv(i,j,k)=vx(fcinb(i+1,idim),j,k) -vx(fcinb(i-1,idim),j,k)
      c(i,j,k)= sqrt(max(0.0,gamma*ge(i,j,k)/d(i,j,k)+
     +  (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)/d(i,j,k)))
      ge_temp(i,j,k) = ge(i,j,k)
           enddo
         enddo
       enddo

        do j=js,je
         do k=ks,ke 
           do i=is+2,ie-2
         if((ge(i,j,k)/(gamma-1.0) .lt. eta1*e(i,j,k)) .and.
     + ((divv(i,j,k) .gt. -eta3*max(c(i,j,k),c(fcinb(i+1,idim),j,k),
     + c(fcinb(i-1,idim),j,k))) .or.
     + (abs(ge_temp(i+1,j,k)-ge_temp(i-1,j,k))
     +  .lt. eta2*ge_temp(i,j,k) 
     +   ))
     + .or. justpre )then
       ge(i,j,k)=max(premin,ge(i,j,k))
       e(i,j,k)=ge(i,j,k)/(gamma-1.0)+0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)+0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
       else
       ge(i,j,k) = (gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2))
       ge(i,j,k)=max(premin,ge(i,j,k))
       endif
           enddo
         enddo   
       enddo

c        do j=js,je
c         do k=ks,ke
c           do i=is+2,ie-2
c       if(ge(i,j,k) .eq. premin) then
c         ge(i,j,k) = ge(i-1,j,k)
c         e(i,j,k)=ge(i,j,k)/(gamma-1.0)+0.5*(vx(i,j,k)**2
c     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)+0.5*
c     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
c
c       endif  
c           enddo
c         enddo
c       enddo
        endif      
 
c       if(gravityon .eq. 1) then
c        do i = is,ie
c         do j = js ,je
c           do k = ks, ke
c           e(i,j,k) = e(i,j,k) - 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +              +vy(i,j,k)**2+vz(i,j,k)**2)
c             vx(i,j,k) = vx(i,j,k) + dt*gr_ax(i,j,k)
c           e(i,j,k) = e(i,j,k) + 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +               +vy(i,j,k)**2+vz(i,j,k)**2)                                                                                                          
c           enddo
c         enddo
c        enddo
c      endif



#ifdef USESTRANG
       n=n+1
       goto 704
 702   continue            
#else
       else if (mod(n,rank) .eq. 1) then 
#endif

         if(verb.eq.1)write(*,*) "y step, ", nhy
         dim=2
         na = jdim - 4
         
         do k=ks, ke
         do i=is,ie

         do j=1,jdim
                       
            wy(j,1)=d(i,j,k)
            wy(j,2)=vy(i,j,k)*d(i,j,k)
            wy(j,3)=vz(i,j,k)*d(i,j,k)
            wy(j,4)=vx(i,j,k)*d(i,j,k)
            wy(j,5)=byc(i,j,k)
            wy(j,6)=bzc(i,j,k)
            wy(j,7)=bxc(i,j,k)
            wy(j,8)=e(i,j,k)
            wy(j,9)=0.0
            wy(j,10)=0.0
c  hx, compute the pressure for gas energy               
              if(idual .eq. 1) wy(j,12)=ge(i,j,k)          

            if( gravityon .eq. 1 )  then
               wy(j,11) = gr_ay(i,j,k)
               wy(j,13) = gr_az(i,j,k)
               wy(j,14) = gr_ax(i,j,k)
              endif

            do mmm = 1,7
               fluxy(j,mmm) = -666.123
            enddo
            if(output .eq. 1) then
               write(701,800) wy(j,1),wy(j,8),wy(j,2),wy(j,3),
     +              wy(j,4),wy(j,5),wy(j,6),
     +              wy(j,7),wy(j,9), wy(j,10)
            endif

c            do mmm=1,10
c               if( wy(j,mmm) .ne. wy(j,mmm) ) then
c                  write(*,*) "SHIT! failure, beginning of y"
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
         enddo
             
          if(idual .eq. 1) then
          call mhdtvd_es(dtstrang, dy, na, wy, fluxy, gamma, gravityon,
     +     premin, tiny, a)
           else   
          call mhdtvd_cosmology(dtstrang, dy, na, wy, fluxy, gamma, 
     +       gravityon,premin, tiny, a)
            endif 

c         do j=js,je
c            do mmm=1,7
c            fluxy(j,mmm) = 0.0
c            enddo 
c         
c         enddo
                                  
         
         do j=js, je
            d(i,j,k) = wy(j,1)
            vx(i,j,k) = wy(j,4)/d(i,j,k)
            vy(i,j,k) = wy(j,2)/d(i,j,k)
            vz(i,j,k) = wy(j,3)/d(i,j,k)
            bxc(i,j,k) = wy(j,7)
            byc(i,j,k) = wy(j,5)
            bzc(i,j,k) = wy(j,6)
            e(i,j,k) = wy(j,8)
c  hx, compute gas energy from pressure
           if(idual .eq. 1) ge(i,j,k)=wy(j,12)                 
            
            if(output .eq. 1) then
               write(711,800) wy(j,1),wy(j,8),wy(j,2),wy(j,3),
     +              wy(j,4),wy(j,5),wy(j,6),
     +              wy(j,7),wy(j,9), wy(j,10)
            endif

c            do mmm=1,10
c               if( wy(j,mmm) .ne. wy(j,mmm) ) then
c                  write(*,*) "SHIT! failure, end of y"
cc                  ERROR_MESSAGE
c               endif
c            enddo

c     dim=2 is set at the beginning of the sweep.

               do s=1, nsubgrids

                  do face=1,2
                     if( j .eq. fluxextents(dim,2,face,1,s) 
     +                .and. (i .le. fluxextents(dim,1,face,2,s))
     +                .and. (i .ge. fluxextents(dim,1,face,1,s))
     +                .and. (k .le. fluxextents(dim,3,face,2,s))
     +                .and. (k .ge. fluxextents(dim,3,face,1,s))
     +                .and. (correct(dim,face) .eq. 1)    ) then
                        
                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array, y",
c     +                    index, totalfluxsize, "(",i,j,k,s,face,
c     +                ")[",fdim(dim,1,s), fdim(dim,2,s), fdim(dim,3,s),
c     +                "]",sizeothersubgrids(s), 
c     +                + i - fluxextents(dim,1,face,1,s)
c     +                + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
c     +                + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
c     +                + fdim(dim,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxy(j-1,mmm)=0.1
c1000*j+10*mmm+face
                        enddo


                        fd(index)  = fd(index) +dtdy*fluxy(j-1,1)
                        fvy(index) = fvy(index)+dtdy*fluxy(j-1,2)
                        fvz(index) = fvz(index)+dtdy*fluxy(j-1,3)
                        fvx(index) = fvx(index)+dtdy*fluxy(j-1,4)
                        fe(index)  = fe(index) +dtdy*fluxy(j-1,7)

c for ES code, no flux correction of energy,xh 
                     if(idual .eq. 2) fe(index) = 0.0


c                        do mmm=1,7
c                           if( fluxy(j-1,mmm) .ne. fluxy(j-1,mmm)
c     +                          .and. mmm .ne. 6
c     +                          .and. mmm. ne. 5) then
c                          write(*,*) "SHIT! Flux Failure y, ijkflg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               


            
         enddo
         
         do j=js+1, je
            fy2(i,j,k) = fy2(i,j,k)+wy(j-1,9)
            fy1(i,j,k) = fy1(i,j,k)+wy(j-1,10)
         enddo
         
      enddo
      enddo	 
      
c xh Choose whether to implement the S system
      if(idual .eq. 1) then 
      call mhdtvd_es_switches(is,ie,js,je,ks,ke,
     + idim,jdim,kdim,dx,dy,dz,d,vx,vy,vz,
     + bxc,byc,bzc,ge,e,gamma,premin,2)
      endif  
 
      if(idual .eq. 2) then
        do i=is,ie
         do k=ks,ke
           do j=js,je
      divv(i,j,k)=vy(i,fcinb(j+1,jdim),k)-vy(i,fcinb(j-1,jdim),k)
     +  +dy*(vx(fcinb(i+1,idim),j,k) -vx(fcinb(i-1,idim),j,k))/dx 
     + +dy*(vz(i,j,fcinb(k+1,kdim))-vz(i,j,fcinb(k-1,kdim)))/dz
      c(i,j,k)= sqrt(max(0.0,gamma*ge(i,j,k)/d(i,j,k)+
     +  (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)/d(i,j,k)))
      ge_temp(i,j,k) =ge(i,j,k)
           enddo
         enddo
       enddo
       do i=is,ie
         do k=ks,ke
           do j=js+2,je-2
            if ((ge(i,j,k)/(gamma-1.0) .lt.  eta1*(e(i,j,k))) .and.
     + (divv(i,j,k) .gt. -eta3*max(c(i,j,k),c(fcinb(i+1,idim),j,k),
     + c(fcinb(i-1,idim),j,k), c(i,j+1,k),c(i,j-1,k),
     +  c(i,j,fcinb(k+1,kdim)),c(i,j,fcinb(k-1,kdim)))) .or.
     + (abs(ge_temp(fcinb(i+1,idim),j,k)-ge_temp(fcinb(i-1,idim),j,k))
     +  +abs(ge_temp(i,j+1,k)-ge_temp(i,j-1,k)) +
     +  abs(ge_temp(i,j,fcinb(k+1,kdim)) -ge_temp(i,j,fcinb(k-1,kdim)))
     +  .lt. eta2*min(ge_temp(i,j,k), ge_temp(fcinb(i+1,idim),j,k),
     +  ge_temp(fcinb(i-1,idim),j,k),ge_temp(i,j+1,k)
     + ,ge_temp(i,j-1,k), ge_temp(i,j,fcinb(k+1,kdim)),
     + ge_temp(i,j,fcinb(k-1,kdim)))) .or. justpre 
     + ) then
       ge(i,j,k)=max(premin,ge(i,j,k))
       e(i,j,k)=ge(i,j,k)/(gamma-1.0)+0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)+0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
       else
       ge(i,j,k) = (gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2))
       ge(i,j,k)=max(premin,ge(i,j,k))
          endif
           enddo
         enddo
       enddo
       endif

c            if(gravityon .eq. 1) then
c        do i = is,ie
c         do j = js ,je
c           do k = ks, ke
c           e(i,j,k) = e(i,j,k) - 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +              +vy(i,j,k)**2+vz(i,j,k)**2)
c             vy(i,j,k) = vy(i,j,k) + dt*gr_ay(i,j,k)
c           e(i,j,k) = e(i,j,k) + 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +               +vy(i,j,k)**2+vz(i,j,k)**2)
c                                                                                                                                                             
c           enddo
c         enddo
c        enddo
c      endif


#ifdef USESTRANG
       n=n+1
       goto 704
 703   continue
#else                               
       else if (mod(n,rank) .eq. 2 .and. (Hack2d .ne. 1) ) then
#endif 
         
         na = kdim-4
         if(verb.eq.1)write(*,*) "z step"
         dim=3

         do i=is, ie
         do j=js, je
                  
         do k=1,kdim
            wz(k,1) = d(i,j,k)
            wz(k,2) = vz(i,j,k)*d(i,j,k)
            wz(k,3) = vx(i,j,k)*d(i,j,k)
            wz(k,4) = vy(i,j,k)*d(i,j,k)
            wz(k,5) = bzc(i,j,k)
            wz(k,6) = bxc(i,j,k)
            wz(k,7) = byc(i,j,k)
            wz(k,8) = e(i,j,k)
            wz(k,9)=0.0
            wz(k,10)=0.0
c  hx, compute the pressure for gas energy               
           if(idual .eq. 1) wz(k,12)=ge(i,j,k)
            
            if( gravityon .eq. 1 )   then
               wz(k,11) = gr_az(i,j,k)
               wz(k,13) = gr_ax(i,j,k)
               wz(k,14) = gr_ay(i,j,k)
              endif

            if(output .eq. 1) then
               write(702,800) wz(k,1),wz(k,8),wz(k,2),wz(k,3),
     +              wz(k,4),wz(k,5),wz(k,6),
     +              wz(k,7),wz(k,9), wz(k,10)
               
            endif
c            do mmm=1,10
c               if( wz(k,mmm) .ne. wz(k,mmm) ) then
c                  write(*,*) "SHIT! failure, beginning of z"
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
         enddo
             
          if(idual .eq. 1) then
          call mhdtvd_es(dtstrang, dz, na, wz, fluxz, gamma, gravityon,
     +	              premin, tiny, a)
           else    
           call mhdtvd_cosmology(dtstrang, dz, na, wz, fluxz, gamma,
     +	              gravityon, premin, tiny, a)  
            endif
     
c           do k=ks,ke
c            do mmm=1,7
c            fluxz(k,mmm) = 0.0
c            enddo 
     
c         enddo

         do k=ks, ke
            if(output .eq. 1) then
               write(712,800) wz(k,1),wz(k,8),wz(k,2),wz(k,3),
     +              wz(k,4),wz(k,5),wz(k,6),
     +              wz(k,7),wz(k,9), wz(k,10)
            endif

c            do mmm=1,10
c               if( wz(k,mmm) .ne. wz(k,mmm) ) then
c                  write(*,*) "SHIT! failure, end of z", i, j, k, mmm
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
            d(i,j,k) = wz(k,1)
            vx(i,j,k) = wz(k,3)/d(i,j,k)
            vy(i,j,k) = wz(k,4)/d(i,j,k)
            vz(i,j,k) = wz(k,2)/d(i,j,k)
            bxc(i,j,k) = wz(k,6)
            byc(i,j,k) = wz(k,7)
            bzc(i,j,k) = wz(k,5)
            e(i,j,k) = wz(k,8)
c  hx, compute gas energy from pressure
           if(idual .eq. 1) ge(i,j,k)=wz(k,12)                
            
c     dim=3 is set at the beginning of the sweep.

            do s=1, nsubgrids

                  do face=1,2
                     if( k .eq. fluxextents(dim,3,face,1,s) 
     +                .and. (i .le. fluxextents(dim,1,face,2,s))
     +                .and. (i .ge. fluxextents(dim,1,face,1,s))
     +                .and. (j .le. fluxextents(dim,2,face,2,s))
     +                .and. (j .ge. fluxextents(dim,2,face,1,s))
     +                .and. (correct(dim,face) .eq. 1) ) then
                        

                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array, y",
c     +                    index, totalfluxsize, "(",i,j,k,s,face,
c     +                ")[",fdim(dim,1,s), fdim(dim,2,s), fdim(dim,3,s),
c     +                "]",sizeothersubgrids(s), 
c     +                + i - fluxextents(dim,1,face,1,s)
c     +                + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
c     +                + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
c     +                + fdim(dim,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxz(k-1,mmm)=0.1
c1000*k+10*mmm+face
                        enddo


                        fd(index)  = fd(index) +dtdz*fluxz(k-1,1)
                        fvz(index) = fvz(index)+dtdz*fluxz(k-1,2)
                        fvx(index) = fvx(index)+dtdz*fluxz(k-1,3)
                        fvy(index) = fvy(index)+dtdz*fluxz(k-1,4)
                        fe(index)  = fe(index) +dtdz*fluxz(k-1,7)

c for ES code, no flux correction of energy,xh 
                     if(idual .eq. 2) fe(index) = 0.0

                        
c                        do mmm=1,7
c                           if( fluxz(k-1,mmm) .ne. fluxz(k-1,mmm)
c     +                          .and. mmm .ne. 5 
c     +                          .and. mmm .ne. 6) then
c                              write(*,*) "SHIT! Flux Failure z ijfklg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               

            
         enddo
         
         do k=ks+1, ke
            fz1(i,j,k) = fz1(i,j,k)+wz(k-1,9)
            fz2(i,j,k) = fz2(i,j,k)+wz(k-1,10)
         enddo
      enddo
      enddo
      
c xh Choose whether to implement the S system
      if(idual .eq. 1) then 
      call mhdtvd_es_switches(is,ie,js,je,ks,ke,
     + idim,jdim,kdim,dx,dy,dz,d,vx,vy,vz,
     + bxc,byc,bzc,ge,e,gamma,premin,3)
      endif

      if(idual .eq. 2) then
        do i=is,ie
         do k=ks,ke
           do j=js,je
      divv(i,j,k)=vz(i,j,fcinb(k+1,kdim))-vz(i,j,fcinb(k-1,kdim))+
     +  dz*(vx(fcinb(i+1,idim),j,k)-vx(fcinb(i-1,idim),j,k))/dx +
     +  dz*(vy(i,fcinb(j+1,jdim),k)-vy(i,fcinb(j-1,jdim),k))/dy
      c(i,j,k)= sqrt(max(0.0,gamma*ge(i,j,k)/d(i,j,k)+
     +  (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)/d(i,j,k)))
      ge_temp(i,j,k) = ge(i,j,k) 
           enddo
         enddo
       enddo
       do i=is,ie
         do j=js,je
           do k=ks+2,ke-2
            if( (ge(i,j,k)/(gamma-1.0) .lt.  eta1*(e(i,j,k))) .and.
     + (divv(i,j,k) .gt. -eta3*max(c(i,j,k),c(fcinb(i+1,idim),j,k),
     + c(fcinb(i-1,idim),j,k),c(i,fcinb(j+1,jdim),k),
     + c(i,fcinb(j-1,jdim),k),c(i,j,k+1),c(i,j,k-1))) .or.
     + (abs(ge_temp(fcinb(i+1,idim),j,k)-ge_temp(fcinb(i-1,idim),j,k))
     + +abs(ge_temp(i,fcinb(j+1,jdim),k)-ge_temp(i,fcinb(j-1,jdim),k))
     + +abs(ge_temp(i,j,k+1)-ge_temp(i,j,k-1)) .lt. 
     + eta2*min(ge_temp(i,j,k),
     + ge_temp(fcinb(i+1,idim),j,k),ge_temp(fcinb(i-1,idim),j,k),
     + ge_temp(i,fcinb(j+1,jdim),k),ge_temp(i,fcinb(j-1,jdim),k),
     + ge_temp(i,j,k+1),ge_temp(i,j,k-1))).or. justpre
     + )then
        ge(i,j,k)=max(premin,ge(i,j,k))
       e(i,j,k)=ge(i,j,k)/(gamma-1.0)+0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)+0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
       else
       ge(i,j,k) = (gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2))
       ge(i,j,k)=max(premin,ge(i,j,k))
          endif
           enddo
         enddo
       enddo
       endif
         
c              if(gravityon .eq. 1) then
c        do i = is,ie
c         do j = js ,je
c           do k = ks, ke
c           e(i,j,k) = e(i,j,k) - 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +              +vy(i,j,k)**2+vz(i,j,k)**2)
c             vz(i,j,k) = vz(i,j,k) + dt*gr_az(i,j,k)
c           e(i,j,k) = e(i,j,k) + 0.5*d(i,j,k)*(vx(i,j,k)**2
c     +               +vy(i,j,k)**2+vz(i,j,k)**2)                                                                                                                                                             
c           enddo
c         enddo
c        enddo
c      endif

#ifdef USESTRANG      
       n=n+1
       goto 704
 705   continue
#else      
       endif

c     end of strang split loop
       enddo

c     end of the other loop
       enddo
#endif

c  change back B field, B=B*sqrt(a), and magnetic flux, for comoving coordinate
      temp = sqrt(a(0))
      do i=1,idim
        do j=1,jdim
          do k=1,kdim
           e(i,j,k) = e(i,j,k) -
     +       0.5*(bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
           bxc(i,j,k) = bxc(i,j,k)*temp
           byc(i,j,k) = byc(i,j,k)*temp
           bzc(i,j,k) = bzc(i,j,k)*temp
           fx1(i,j,k) = fx1(i,j,k)*temp
           fx2(i,j,k) = fx2(i,j,k)*temp
           fy1(i,j,k) = fy1(i,j,k)*temp
           fy2(i,j,k) = fy2(i,j,k)*temp
           fz1(i,j,k) = fz1(i,j,k)*temp
           fz2(i,j,k) = fz2(i,j,k)*temp
           e(i,j,k) = e(i,j,k) +
     +       0.5*(bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2)
          enddo
        enddo
      enddo




c computer the numerical diffusion terms
      if(idiff .eq. 1) then
        if(idual .eq. 0) then
         do i=is,ie
          do j=js,je
           do k=ks,ke
         ge_temp(i,j,k)=(gamma-1.0)*(e(i,j,k)-0.5*(vx(i,j,k)**2
     +   +vy(i,j,k)**2+vz(i,j,k)**2)*d(i,j,k)-0.5*
     + (bxc(i,j,k)**2+byc(i,j,k)**2+bzc(i,j,k)**2))
           enddo
          enddo
         enddo
        call  mhdtvd_cdt(is,ie,js,je,ks,ke,
     + idim,jdim,kdim,dx,dy,dz,d,vx,vy,vz,
     + bxc,byc,bzc,ge_temp,e,gamma,diffd1,diffd2,diffd3)
        endif
       if(idual .eq. 1) then
        call  mhdtvd_cdt(is,ie,js,je,ks,ke,
     + idim,jdim,kdim,dx,dy,dz,d,vx,vy,vz,
     + bxc,byc,bzc,ge,e,gamma,diffd1,diffd2,diffd3)
        endif
       
      endif
 

c hx compute gas enegy from gas pressure      
       if(idual .eq. 1) then
        if(.false.) then
        k=4
        i=4
       do j=1,jdim
          write (*,*) j, ge(i,j,k),d(i,j,k),vx(i,j,k),bxc(i,j,k)
       enddo
          write (*,*)
       endif
       do i=1,idim
         do j=1,jdim
           do k= 1,kdim
           ge(i,j,k) =  ge(i,j,k)/((gamma-1.0)*d(i,j,k))
           enddo
          enddo
        enddo
       
       endif
       
      
      
c hx gravitational step
      if(gravityon .eq. 1) then
        do i = is,ie
         do j = js ,je
           do k = ks, ke
           e(i,j,k) = e(i,j,k) - 0.5*d(i,j,k)*(vx(i,j,k)**2
     +              +vy(i,j,k)**2+vz(i,j,k)**2)
           if(idiff .eq. 1 ) then
            e(i,j,k) = e(i,j,k)
     +    -dt*(d(i,j,k)*vx(i,j,k)-diffd1(i,j,k))*gr_ax(i,j,k)
     +    -dt*(d(i,j,k)*vy(i,j,k)-diffd2(i,j,k))*gr_ay(i,j,k)
     +    -dt*(d(i,j,k)*vz(i,j,k)-diffd3(i,j,k))*gr_az(i,j,k) 
           vx(i,j,k) = vx(i,j,k) + dt*gr_ax(i,j,k)
     +          *(1.0-diffd1(i,j,k)/(d(i,j,k)*vx(i,j,k)))
           vy(i,j,k) = vy(i,j,k) + dt*gr_ay(i,j,k)
     +          *(1.0-diffd2(i,j,k)/(d(i,j,k)*vy(i,j,k)))
           vz(i,j,k) = vz(i,j,k) + dt*gr_az(i,j,k)
     +          *(1.0-diffd3(i,j,k)/(d(i,j,k)*vz(i,j,k)))
           else
             vx(i,j,k) = vx(i,j,k) + dt*gr_ax(i,j,k)
             vy(i,j,k) = vy(i,j,k) + dt*gr_ay(i,j,k)
             vz(i,j,k) = vz(i,j,k) + dt*gr_az(i,j,k)        
           endif
           e(i,j,k) = e(i,j,k) + 0.5*d(i,j,k)*(vx(i,j,k)**2
     +               +vy(i,j,k)**2+vz(i,j,k)**2)

           enddo
         enddo
        enddo
      endif   
               
      
      close(700)
      close(701)
      close(702)
      close(710)
      close(711)
      close(712)
      

      end


c Function to correct the index near the boundary

      function fcinb(i,imax)

      integer fcinb

      integer i,imax
      
      if(i .eq. 0)then
         fcinb=1
      else if(i .eq. imax+1) then
         fcinb=imax
      else 
         fcinb=i
      endif
      
      return 
      end

