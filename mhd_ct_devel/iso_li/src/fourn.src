*****************************************************************************
*                                                                           *
* Copyright 2004 Greg Bryan                                                 *
* Copyright 2004 Laboratory for Computational Astrophysics                  *
* Copyright 2004 Board of Trustees of the University of Illinois            *
* Copyright 2004 Regents of the University of California                    *
*                                                                           *
* This software is released under the terms of the "Enzo Public License"    *
* in the accompanying LICENSE file.                                         *
*                                                                           *
*****************************************************************************

#include "error.def"
c=======================================================================
c////////////////////////  SUBROUTINE FOURN  \\\\\\\\\\\\\\\\\\\\\\\\\\\
c
        subroutine fourn(data, nrank, idim1, idim2, idim3, idir)
c
c  PERFORM A COMPLEX-COMPLEX N-DIMENSIONAL FFT
c
c   written by: Numerical Recipes
c   data:
c   modified1:
c
c  PURPOSE:  Replaces DATA by its NRANK-dimensional discrete Fourier transform
c      if IDIR is 1.  NN is an integer array of length NRANK, containing
c      the lengths of each dimension (number of complex values), which
c      MUST all be powers of 2.  DATA is a real array of length twice the
c      product of these lengths, in which the data are stored as in a
c      multidimensional complex FORTRAN array.  If IDIR in input as -1,
c      DATA is replaced by its inverse transform times the product of the
c      lengths of all dimensions.
c
c  INPUTS:
c    nn    - an integer array of length NRANK, containing the lengths of 
c          each dimension
c    data  - data to be transformed
c    nrank  - number of dimensions
c    idir - +1 is forward, -1 is inverse
c
c  OUTPUTS:
c    data  - transformed array
c
c-----------------------------------------------------------------------
      implicit NONE
c
c  Arguments
c
      real    data(*)
      integer idir, nrank
c
c  External functions
c
      logical power_of_2
c
c  Locals
c
      integer i1, i2, i3, i2rev, i3rev, ibit, idim, idim1, idim2, idim3
      integer ifp1, ifp2, ip1, ip2, ip3, k2, n, nprev, nrem, ntot
      integer ibad, nn(3)
      real    tempi, tempr
c     double precision twopi, theta, wr, wi, wpr, wpi, wtemp
      real    twopi, theta, wr, wi, wpr, wpi, wtemp
      parameter (twopi=6.2831853071796e0)
c
c\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\///////////////////////////////////
c=======================================================================
c
c     Compute total number of complex values
c


      nn(1) = idim1
      nn(2) = idim2
      nn(3) = idim3

      ibad = 0

      do idim = 1, nrank
         if( .NOT. power_of_2(nn(idim)) ) then
            write(*,'("Index ",i5," is not a power of 2")') idim
            ibad = 1
         end if
      end do

      if( ibad .ne. 0 ) then
         ERROR_MESSAGE
      end if

      ntot = 1
      do idim=1, nrank
         ntot = ntot*nn(idim)
      enddo
      nprev=1
c
c     Main loop over the dimensions.
c
      do idim=1, nrank
         n     = nn(idim)
         nrem  = ntot/(n*nprev)
         ip1   = 2*nprev
         ip2   = ip1*n
         ip3   = ip2*nrem
         i2rev = 1
c
c        This is the bit reversal section of the routine.
c
         do i2=1,ip2,ip1
            if (i2.lt.i2rev) then
               do i1=i2, i2+ip1-2, 2
                  do i3=i1, ip3, ip2
                     i3rev = i2rev + i3 - i2
                     tempr = data(i3  )
                     tempi = data(i3+1)
                     data(i3     ) = data(i3rev  )
                     data(i3+1   ) = data(i3rev+1)
                     data(i3rev  ) = tempr
                     data(i3rev+1) = tempi
                  enddo
               enddo
            endif
c
            ibit = ip2/2
 1          if ((ibit.ge.ip1) .and. (i2rev.gt.ibit)) then
               i2rev = i2rev-ibit
               ibit  = ibit/2
               go to 1
            end if
            i2rev = i2rev + ibit
         enddo
c
c        Here begins the Danielson-Lanczos section of the routine.
c
          ifp1 = ip1
 2        if (ifp1 .lt. ip2) then
             ifp2 = 2*ifp1
c
c         Initialize for the trigonometric recurrence.
c
             theta = idir*twopi/(ifp2/ip1)
             wpr   = -2.0*sin(0.5*theta)**2
             wpi   = sin(theta)
             wr    = 1.0
             wi    = 0.0
             do i3 = 1, ifp1, ip1
                do i1 = i3, i3+ip1-2, 2
                   do i2 = i1, ip3, ifp2
c
c                     Danielson-Lanczos formula.
c
                      k2 = i2 + ifp1
                      tempr = wr * data(k2  ) - wi*data(k2+1)
                      tempi = wr * data(k2+1) + wi*data(k2  )
                      data(k2  ) = data(i2  ) - tempr
                      data(k2+1) = data(i2+1) - tempi
                      data(i2  ) = data(i2  ) + tempr
                      data(i2+1) = data(i2+1) + tempi
                   enddo
                enddo
c
c              Trigonometric recurrence.
c
                wtemp = wr
                wr    = wr*wpr - wi*wpi    + wr
                wi    = wi*wpr + wtemp*wpi + wi
             enddo
c
             ifp1 = ifp2
             go to 2
          end if
          nprev = n*nprev
c
       enddo
c
       return
       end
