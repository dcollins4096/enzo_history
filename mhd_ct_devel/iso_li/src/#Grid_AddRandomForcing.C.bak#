/***********************************************************************
/
/  GRID CLASS (ADD RANDOM FORCING FIELDS TO VELOCITIES)
/
/  written by: Alexei Kritsuk
/  date:       January, 2004
/  modified1:
/
/  PURPOSE:
/
/  RETURNS:
/    SUCCESS or FAIL
/
************************************************************************/

#include <stdio.h>
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"

int grid::AddRandomForcing(float * norm, float dtTopGrid)
{

  /* Return if this doesn't concern us. */

  if (ProcessorNumber != MyProcessorNumber)
    return SUCCESS;

  /* Find fields: density, total energy, velocity1-3. */
 
  int DensNum, GENum, Vel1Num, Vel2Num, Vel3Num, TENum, dim, i;
  if (this->IdentifyPhysicalQuantities(DensNum, GENum, Vel1Num, Vel2Num,
				       Vel3Num, TENum) == FAIL) {
    fprintf(stderr, "GARF: Error in IdentifyPhysicalQuantities.\n");
    return FAIL;
  }
                                                                             
  /* error check. */
  
  if (RandomForcingField[0] == NULL) {
    fprintf(stderr,"random forcing field NULL\n");
    ERROR_MESSAGE;
  }
  
  if (RandomForcingField[0][0] == 0.0) {
    fprintf(stderr,"Error with Random forcing field Field[0][0]==0\n");
    ERROR_MESSAGE;
  }
  

  if (dtTopGrid == 0.0) {
    fprintf(stderr,"Random Forcing: dtTopGrid = 0\n");
    ERROR_MESSAGE;
  }

  

  /* compute the field size */

  int size = 1;
  for (dim = 0; dim < GridRank; dim++)
    size *= GridDimension[dim];

  /* update total energy first. */


  float levelNorm = (*norm)*dtFixed/dtTopGrid;
  if (levelNorm <= 0.0)
    WARNING_MESSAGE;

  /* do not do the update if using ZEUS */
  /* Or using Isothermal EOS. */
  if (HydroMethod != Zeus_Hydro
#ifdef ATHENA
&& EquationOfState == 0 
#endif //ATHENA
      )
    if(MHD_Used != TRUE ){
      for (i = 0; i < size; i++)
	for (dim = 0; dim < GridRank; dim++)
	  BaryonField[TENum][i] +=
	    BaryonField[Vel1Num+dim][i]*
	    RandomForcingField[dim][i]*levelNorm +
	    0.5*RandomForcingField[dim][i]*levelNorm*
	    RandomForcingField[dim][i]*levelNorm;
    }else{
      for (i = 0; i < size; i++)
	for (dim = 0; dim < GridRank; dim++)
	  BaryonField[TENum][i] +=
	    BaryonField[DensNum][i]*(
				  BaryonField[Vel1Num+dim][i]*
				  RandomForcingField[dim][i]*levelNorm +
				  0.5*RandomForcingField[dim][i]*levelNorm*
				  RandomForcingField[dim][i]*levelNorm);
    }
  
  /* add velocity perturbation to velocity fields. */
  
  for (dim = 0; dim < GridRank; dim++)
    for (i = 0; i < size; i++)
      BaryonField[Vel1Num+dim][i] += RandomForcingField[dim][i]*levelNorm;

  /*  
      #ifdef ATHENA  
      //Wow, this is some shitty code practice right here:
      //If we're using the hydro method Athena, we want to drive the OLD baryon field,
      //not the new.  This is because in Athena, unlike PPM, Zeus, or any
      //other hydro method, our update is actually
      //BaryonField = OldBaryonField + \delta Flux.
      //where OldBaryonField is actually used in the update.  
      
      float * tmpPointer;
      if( HydroMethod == 4 ){
      for(dim=0;dim<GridRank;dim++){
      tmpPointer = BaryonField[Vel1Num + dim];
      BaryonField[Vel1Num + dim] = OldBaryonField[Vel1Num + dim];
      OldBaryonField[Vel1Num + dim ] = tmpPointer;
      }
      if( EquationOfState == 0 ){
      tmpPointer = BaryonField[TENum];
      BaryonField[TENum] = OldBaryonField[TENum];
      OldBaryonField[TENum ] = tmpPointer;
      }
      }
      #endif //ATHENA
  */
  return SUCCESS;
  
}
  
