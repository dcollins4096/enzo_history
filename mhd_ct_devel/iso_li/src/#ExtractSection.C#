/*****************************************************************************
 *                                                                           *
 * Copyright 2004 Greg Bryan                                                 *
 * Copyright 2004 Laboratory for Computational Astrophysics                  *
 * Copyright 2004 Board of Trustees of the University of Illinois            *
 * Copyright 2004 Regents of the University of California                    *
 *                                                                           *
 * This software is released under the terms of the "Enzo Public License"    *
 * in the accompanying LICENSE file.                                         *
 *                                                                           *
 *****************************************************************************/
/***********************************************************************
/
/  EXTRACTS A SECTION OF THE GRID AND SAVES IT
/
/  written by: Greg Bryan
/  date:       May, 1995
/  modified1:
/
/  PURPOSE:
/
************************************************************************/

// This function extracts a section of the solution at the specified level
//   and with the specified size.  The solution is taken from grids at that
//   level where possible and interpolated from above otherwise.

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"
#include "Hierarchy.h"
#include "LevelHierarchy.h"
#include "TopGridData.h"
#include "StarParticleData.h"
#define DC_LEVELNUMBER_no

/* function prototypes */

int CopyOverlappingZones(grid* CurrentGrid, TopGridData *MetaData, 
			 LevelHierarchyEntry *LevelArray[], int level);
void WriteListOfFloats(FILE *fptr, int N, FLOAT floats[]);
void my_exit(int status);

/* Information for creating graphical grid structure. */

int NumberOfLinks[3] = {2, 5, 16};
int LinkSide[16][3] = { 
  {0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 1, 0}, {0, 0, 0},
  {0, 0, 1}, {1, 0, 1}, {1, 1, 1}, {0, 1, 1}, {0, 0, 1},
  {1, 0, 1}, {1, 0, 0}, {1, 1, 0}, {1, 1, 1}, {1, 0, 1},
  {1, 0, 0}  
};
char ExtractOutputName[] = "amr_extract";

void WriteBinary(fptr,data, size){

  //FILE * fptr = fopen(GlueFile,"ab");

  int nPieces ((size > 700*700*700) ?4:1) ;
  for( int p=0;p<nPieces;p++){
    size_t toWrite = gbuff_size/nPieces;
    float *piece = data + p*toWrite;
    long int nWrite = fwrite(piece, sizeof(float), toWrite, fptr);
    if( ferror(fptr) ){
      perror("Monkies!");
    }
    if( nWrite != toWrite ){
      fprintf(stderr,"mglue: error writing binary file. To write: %d. Written:%d piece %d\n",
	      toWrite, nWrite, p);
    }
    fprintf(stderr,"mglue: To write: %d. Written:%d piece %d\n",
	    toWrite, nWrite,p);
  }
  fclose(fptr);



void ExtractSection(HierarchyEntry &TopGrid, TopGridData &MetaData,
		    LevelHierarchyEntry *LevelArray[], 
		    ExternalBoundary *Exterior,
		    int ExtractStart[], int ExtractEnd[], 
		    FLOAT ExtractStartCoordinate[],
		    FLOAT ExtractEndCoordinate[], int ExtractLevel)
{
  
  fprintf(stderr,"moo %d\n",1);
  fflush(stderr);
  int i, dim, level, TotalRefineBy = 1;
  int ExtractDims[MAX_DIMENSION], SetTopGridBoundary = TRUE;
  FLOAT LeftPosition[MAX_DIMENSION], RightPosition[MAX_DIMENSION],
    TempCellWidth;
  LevelHierarchyEntry *Temp;
  
  /* If undefined, set parameters. */
  
  if (ExtractLevel == INT_UNDEFINED)
    ExtractLevel = 0;
  
  for (i = 0; i < ExtractLevel; i++)
    TotalRefineBy *= RefineBy;
  
  for (dim = 0; dim < MetaData.TopGridRank; dim++) {
    
    /* If the start/end coordinate have been set, use them to set the
       indexes. */
    
    TempCellWidth = (DomainRightEdge[dim] - DomainLeftEdge[dim])/
      FLOAT(MetaData.TopGridDims[dim]*TotalRefineBy);
    
    if (ExtractStartCoordinate[dim] != FLOAT_UNDEFINED)
      ExtractStart[dim] = nint((ExtractStartCoordinate[dim] - 
				DomainLeftEdge[dim] ) / TempCellWidth );
    
    if (ExtractEndCoordinate[dim] != FLOAT_UNDEFINED)
      ExtractEnd[dim] = nint((ExtractEndCoordinate[dim] - 
			      DomainLeftEdge[dim] ) / TempCellWidth ) - 1;
    
    /* If start/end indexes haven't been set, then set some default
       values. */
    
    if (ExtractStart[dim] == INT_UNDEFINED)
      ExtractStart[dim] = 0;
    if (ExtractEnd[dim] == INT_UNDEFINED)
      ExtractEnd[dim] = MetaData.TopGridDims[dim]*TotalRefineBy - 1;
    
    /* Unless the entire region is being extracted, we can't set the
       external boundary. */
    
    if (ExtractStart[dim] != 0 || 
	ExtractEnd[dim] != MetaData.TopGridDims[dim]*TotalRefineBy - 1)
      SetTopGridBoundary = FALSE;
    
  }
  
  /* For each grid on this level collect all the particles below it.
     Notice that this must be done even for static hierarchy's.  */
  
  for (level = MAX_DEPTH_OF_HIERARCHY-1; level > 0; level--) {
    Temp = LevelArray[level];
    while (Temp != NULL) {
      if (Temp->GridHierarchyEntry->ParentGrid->GridData->MoveAllParticles
	  (1, &Temp->GridData) == FAIL) {
	WARNING_MESSAGE;
	my_exit(EXIT_FAILURE);
      }
      printf("Called MoveAllParticles \n");
      Temp = Temp->NextGridThisLevel;
    }
  } // end: loop over levels
  fprintf(stderr,"moo %d\n",2);
  fflush(stderr);  
#define NO_CREATE_DENSITY_SQUARED
#ifdef CREATE_DENSITY_SQUARED
  
  /* First, modify each grid to create a new field -- rho^2. */
  
  for (level = 0; level < MAX_DEPTH_OF_HIERARCHY; level++) {
    Temp = LevelArray[level];
    while (Temp != NULL) {
      Temp->GridData->CreateDensitySquaredField();
      Temp = Temp->NextGridThisLevel;
    }
  }
  
  //I don't think this is ever actually used. dcc.
  //Face centering prevented us from using ProjectSolutionToParentGrid for runs.  
  //It should be fine for extractions, beause at the output the proper projection routine has been run,
  //and the parent grid will reflect the subgrid.  Projection here will incur no divergences. (i hope.)
  
  
  int MHD_Extraction = TRUE;

  if( MHD_Used == TRUE ){
    MHD_ProjectB = TRUE;
    MHD_ProjectE = TRUE;
  }
  
  /* Next, project data from high levels to low levels. */
  
  for (level = MAX_DEPTH_OF_HIERARCHY-1; level > 0; level--) {
    Temp = LevelArray[level];
    while (Temp != NULL) {
      Temp->GridData->ProjectSolutionToParentGrid(
		  *Temp->GridHierarchyEntry->ParentGrid->GridData, MHD_Extraction);
      Temp = Temp->NextGridThisLevel;
    }
  }
  
#endif
  fprintf(stderr,"moo %d\n",3);
  fflush(stderr);

  //#ifdef DC_LEVELNUMBER
  //Grids[ExtractLevel]->CreateLevelNumberField(ExtractLevel);
  //#endif
  
  
  /* --------------------------------------------------------------- */
  /* Create and clear a set of grids. */
  
  grid* Grids[MAX_DEPTH_OF_HIERARCHY];
  for (i = 0; i < MAX_DEPTH_OF_HIERARCHY; i++)
    Grids[i] = NULL;
  
  /* Loop up hierarchy, starting from ExtractLevel, creating grids until we
     get to the top. */
  
  for (level = ExtractLevel; level >= 0; level--) {
    
    /* Convert Start/End indexes into numbers and add buffer zones. */
    
    for (dim = 0; dim < MetaData.TopGridRank; dim++) {
      
      /* Make sure the indexes are on a parental boundary. */
      
      if (level > 0) {
	ExtractStart[dim] =  int(ExtractStart[dim]/RefineBy)   *RefineBy;
	ExtractEnd[dim]   = (int(ExtractEnd[dim]  /RefineBy)+1)*RefineBy-1;
      }
      
      /* Compute corresponding positions and compute dims. */
      
      LeftPosition[dim] = FLOAT(ExtractStart[dim])/
	FLOAT(MetaData.TopGridDims[dim]*TotalRefineBy)
	*(DomainRightEdge[dim] - DomainLeftEdge[dim]) +
	DomainLeftEdge[dim];
      RightPosition[dim] = FLOAT(ExtractEnd[dim]+1)/
	FLOAT(MetaData.TopGridDims[dim]*TotalRefineBy)
	*(DomainRightEdge[dim] - DomainLeftEdge[dim]) +
	DomainLeftEdge[dim];
      ExtractDims[dim] = ExtractEnd[dim] - ExtractStart[dim] + 1 
	+ 2*DEFAULT_GHOST_ZONES;
    }
    
    /* Create a new grid and fill it full of goodies. */
  fprintf(stderr,"moo %d\n",4);
  fflush(stderr);    
    Grids[level] = new grid;
    Grids[level]->InheritProperties(LevelArray[0]->GridData);
    Grids[level]->PrepareGrid(MetaData.TopGridRank, ExtractDims,
			      LeftPosition, RightPosition, 0);
    Grids[level]->AllocateGrids();
    Grids[level]->SetTime(MetaData.Time);
#ifdef DC_LEVELNUMBER
    /*
    fprintf(stderr,"dccC: grid level %d\n",level);
    Grids[level]->CreateLevelNumberField(level);
    */
#endif
    /* Next level up (change start/stop indicies). */
    
    for (dim = 0; dim < MetaData.TopGridRank; dim++) {
      ExtractStart[dim] = ExtractStart[dim]/RefineBy;
      ExtractEnd[dim]   = (ExtractEnd[dim]+1)/RefineBy - 1;
    }
    
    TotalRefineBy /= RefineBy;
    
  } // end loop over levels
  
  /* --------------------------------------------------------------- */
  /* Reverse direction, interpolating & copying grid values from the hierarchy
     to our set of grids. */
  
#ifdef DC_LEVELNUMBER

  for (level = 0; level < MAX_DEPTH_OF_HIERARCHY; level++) {
    Temp = LevelArray[level];
    while (Temp != NULL) {
      fprintf(stderr,"dccC level create, level %d", level);
      Temp->GridData->CreateLevelNumberField(level);
      Temp = Temp->NextGridThisLevel;
    }
  }
  for( level = 0; level <=ExtractLevel; level++){
    Grids[level]->CreateLevelNumberField(level);
  }
#endif
  
  
  for (level = 0; level <= ExtractLevel; level++) {
    
    /* If level > 0: Interpolate from higher grid (if present). */
    
    if (level > 0)
      if (Grids[level]->InterpolateFieldValues(Grids[level-1]) == FAIL) {
	WARNING_MESSAGE;
	my_exit(EXIT_FAILURE);
      }
    
    
    //Remove the temporary MHD grids created in InterpolateFieldValues
    if(MHD_Used)
      Grids[level]->MHDCleanUpTemp();
    
    /* Copy zones from other grids on this level. */
    
    if (CopyOverlappingZones(Grids[level], &MetaData, LevelArray, level) 
	== FAIL) {
      WARNING_MESSAGE;
      my_exit(EXIT_FAILURE);
    }
    
    /* Set boundary values for the top grid (only for the top level and then
       only if it is the entire level). */
    
    
    
    //#ifdef HENRY_FIX
    if (level == 0 && SetTopGridBoundary == TRUE && 0==1){
      if (Grids[0]->SetExternalBoundaryValues(Exterior) == FAIL) {
	WARNING_MESSAGE;
	my_exit(EXIT_FAILURE);
      }
    }else{
      fprintf(stderr,"not setting external boundary. dcc.\n");
    }      
      //#endif /* HENRY_FIX */
  } // end loop over levels
    

  /* Move particles from the top grid of the input hierarchy into the bottom
     grid of our fake hierarchy. */

// Count maximum number of particles at this level

  int RHC = 0;
  int RHN = 0; 

  Temp = LevelArray[0];

  while (Temp != NULL) {
    RHN = Temp->GridData->ReturnNumberOfParticles();
    RHC = RHC + RHN;
    Temp = Temp->NextGridThisLevel;
  }
  printf("Allocate N %d\n",RHC);

// Allocate arrays for entire particle subgrid data

  FLOAT *Position[MAX_DIMENSION];
  float *Velocity[MAX_DIMENSION];
  float *Attribute[MAX_NUMBER_OF_PARTICLE_ATTRIBUTES];
  float *Mass;
  int   *Number;

  Mass = new float[RHC];
  Number = new int[RHC];
  for (dim = 0; dim < MetaData.TopGridRank; dim++)
  {
    Position[dim] = new FLOAT[RHC];
    Velocity[dim] = new float[RHC];
  }
  for (i = 0; i < NumberOfParticleAttributes; i++)
  {
    Attribute[i] = new float[RHC];
  }

//

  int RHP = 0; // global counter

//

  Temp = LevelArray[0];

  while (Temp != NULL) {
    if (Grids[ExtractLevel]->MoveSubgridParticles(Temp->GridData,
                                                  &RHP, 
                                                  Number,
                                                  Mass,
                                                  Position,
                                                  Velocity,
                                                  Attribute) == FAIL) 
    {
      WARNING_MESSAGE;
      my_exit(EXIT_FAILURE);
    }
    printf("Called MoveSubgridParticles %d\n",RHP);
    Temp = Temp->NextGridThisLevel;
  }

/*
  for (i = 0; i < RHP; i++)
  {
    printf("  %d",Number[i]);
    if ( (i % 10) == 0 ) 
    {
      printf("\n");
    }
  }
  printf("\n");
*/

//  RHP = RHP - 1;
  Grids[ExtractLevel]->SetParticlePointers(Mass, Number, Position, Velocity, Attribute);
  Grids[ExtractLevel]->SetNumberOfParticles(RHP);

/*
  delete Mass;
  delete Number;
  for (dim = 0; dim < MetaData.TopGridRank; dim++)
  {
    delete Position[dim];
    delete Velocity[dim];
  }
  for (i = 0; i < NumberOfParticleAttributes; i++)
  {
    delete Attribute[i];
  }
*/

  /* Write out bottom-most grid. */

  FILE *output = stdout;

  if (debug)
    output = stderr;
  fprintf(stderr,"moo %d\n",5);
#ifdef DC_LEVELNUMBER
  //    Grids[ExtractLevel]->CreateLevelNumberField(ExtractLevel);
#endif  
#ifdef USE_HDF5
  if (ExtractFieldsOnly)
  {
    if (Grids[ExtractLevel]->WriteGridX(output, ExtractOutputName, 0) == FAIL) {
      WARNING_MESSAGE;
      my_exit(EXIT_FAILURE);
    }
  }
  else
  { 
    if (Grids[ExtractLevel]->WriteGrid(output, ExtractOutputName, 0) == FAIL) {
      WARNING_MESSAGE;
      my_exit(EXIT_FAILURE);
    }
  }
#elif defined (USE_HDF4)
  if (Grids[ExtractLevel]->WriteGrid(output, ExtractOutputName, 0) == FAIL) {
    WARNING_MESSAGE;
    my_exit(EXIT_FAILURE);
  }
#else
  WARNING_MESSAGE;
  my_exit(EXIT_FAILURE);
#endif  
  fprintf(stderr,"moo %d\n",6);
  /* If using particles, open a file to output particle data. */

  FILE *StarFile = NULL;

  if (StarParticleCreation)
    StarFile = fopen("extract.stars", "wb");
  if (StarFile != NULL) {
    if (fwrite( (void*) &NumberOfStarParticles, sizeof(int), 1, StarFile) != 1)
      perror("error in fwrite1");
    int tempint = NumberOfParticleAttributes + 4;
    fwrite( (void*) &tempint, sizeof(int), 1, StarFile);
    Grids[ExtractLevel]->OutputStarParticleInformation(StarFile);
    fclose(StarFile);
  }

  /* --------------------------------------------------------------- */
  /* Write out a grid plot file. */

  if ((output = fopen("amr.grid", "w")) == NULL) {
    WARNING_MESSAGE;
    my_exit(EXIT_FAILURE);
  }

  /* Loop over all levels. */

  int Level, grid, Rank, Dims[MAX_DIMENSION];
  FLOAT Left[MAX_DIMENSION], Right[MAX_DIMENSION];
  for (Level = 0; Level < MAX_DEPTH_OF_HIERARCHY; Level++) {
    fprintf(stderr,"moo %d level %d\n",7, Level);
    /* Loop over this level. */

    Temp = LevelArray[Level];
    grid = 0;
    while (Temp != NULL) {

      /* Get grid info. */

      Temp->GridData->ReturnGridInfo(&Rank, Dims, Left, Right);

      /* Write out grid data. */

      fprintf(output, "Level %d   Grid %d\n", Level, grid);

#define CORNERS

#ifdef LINES
      for (i = 0; i < NumberOfLinks[Rank-1]; i++) {
	for (dim = 0; dim < Rank; dim++)
	  if (LinkSide[i][dim] == 0)
	    fprintf(output, "%f ", Left[dim]);
	  else
	    fprintf(output, "%f ", Right[dim]);
	fprintf(output, "\n");
      }
#endif /* LINES */

#ifdef CORNERS
//      for (dim = 0; dim < Rank; dim++)
//	fprintf(output, "%f %f\n", Left[dim], Right[dim]);
      WriteListOfFloats(output, Rank, Left);
      WriteListOfFloats(output, Rank, Right);
//      fprintf(output, "%f %f %f\n", Right[0]-Left[0], Right[1]-Left[1], 
//	      Right[2]-Left[2]);
#endif /* CORNERS */
      

      /* Next grid. */

      Temp = Temp->NextGridThisLevel;
      grid++;

    } // end loop over this level

  }

  /* Close file. */

  fclose(output);

  my_exit(EXIT_SUCCESS);
}
