c#include "fortran.def"
#include "error.def"
c#define tiny 1.0e-20

      subroutine mhd_harten(d, e, vx, vy, vz, 
     +     bxc, byc, bzc, 
     +     gravityon, gr_ax,gr_ay,gr_az,
     +     fx1, fy1, fz1,
     +     fx2, fy2, fz2,
     +     fd, fe, fvx, fvy, fvz, 
     +     fluxextents, totalfluxsize, nsubgrids,
     +     dx, dy, dz, idim, jdim, kdim,
     +     i1, i2, j1, j2, k1, k2, dt, gamma,
     +     nhy, rank, level, grid, Hack2d
#ifdef NSS
     +                   , recon, riemann, eps
#endif
     + )           
      
      implicit none
c     
c     arguments
c     
      
      integer idim, jdim, kdim, level, grid, gravityon
      integer i1, i2, j1, j2, k1, k2, nhy, rank, Hack2d
      integer totalfluxsize, nsubgrids
      integer fluxextents(3,3,2,2,nsubgrids)
      real dx, dy, dz
      real dt, gamma
      
      real d(idim,jdim,kdim), e(idim,jdim,kdim)
      real vx(idim,jdim,kdim), vy(idim,jdim,kdim), vz(idim,jdim,kdim)
      real bxc(idim,jdim,kdim),byc(idim,jdim,kdim),bzc(idim,jdim,kdim)
      real gr_ax(idim,jdim,kdim),gr_ay(idim,jdim,kdim),
     +     gr_az(idim,jdim,kdim)
      real fx1(idim+1,jdim,kdim),fx2(idim+1,jdim,kdim),
     +     fy1(idim,jdim+1,kdim),fy2(idim,jdim+1,kdim),
     +     fz1(idim,jdim,kdim+1),fz2(idim,jdim,kdim+1)
      real fd(totalfluxsize), fe(totalfluxsize), fvx(totalfluxsize),
     +     fvy(totalfluxsize), fvz(totalfluxsize)
      
c     
c     internal variables
c     
      integer i,j,k, dim, coord, face, s, dummy
      integer SizeOtherSubgrids(nsubgrids+1), sizeofface, sizeofsubgrid
      integer SizeOtherDims(3+1,nsubgrids), TotalOffset(3,nsubgrids)
      integer ixyz, n, retard1, retard2, output, strang, nhyt
      integer is, ie, js, je, ks, ke, na, increment, mmm
      integer fdim(3,3,nsubgrids), index
      real wx(idim,11), wy(jdim,11), wz(kdim,11), dtstrang
      real dtdx,dtdy, dtdz
      real fluxx(idim, 7), fluxy(jdim,7), fluxz(kdim,7)
      integer correct(3,2)
      integer onlyx, nstart, nend, side, verb
      real tiny 
#ifdef USESTRANG
      integer iflag(0:5,3),nmod
#endif
#ifdef NSS
      integer recon, riemann 
      real eps(4)

c      recon = 0
c      riemann = 0
c      eps(1)  = 0.05
c      eps(2)  = 0.05
c      eps(3)  = 0.05
c      eps(4)  = 0.05
c      eps(1)  = 0.2
c      eps(2)  = 0.1
c      eps(3)  = 0.05
c      eps(4)  = 0.05

#endif
c      Hack2d=1

      tiny = 1.0d-20
      verb = 0

#ifdef USESTRANG
      iflag(0,1) = 1
      iflag(0,2) = 2
      iflag(0,3) = 3
      iflag(1,1) = 3
      iflag(1,2) = 2
      iflag(1,3) = 1
      iflag(2,1) = 2
      iflag(2,2) = 3
      iflag(2,3) = 1
      iflag(3,1) = 1
      iflag(3,2) = 3
      iflag(3,3) = 2
      iflag(4,1) = 3
      iflag(4,2) = 1
      iflag(4,3) = 2
      iflag(5,1) = 2
      iflag(5,2) = 1
      iflag(5,3) = 3      
      nmod = mod(nhy,6)
      if( verb .eq. 1 ) write(*,*) "Strang ON"
#else
      if( verb .eq. 1 ) write(*,*) "Strang OFF"
#endif 
      if( verb .eq. 1 ) write(*,*) "Hack 2d", Hack2d

      side = -1

#ifdef NSS
c     Some error handling
      if( riemann .ne. 0 .and. riemann .ne. 1 ) then
         write(*,*) "mhd_harten error: riemann == ", riemann,
     +        "not a valid choice."
         ERROR_MESSAGE
      endif
#endif

c     this is for debugging.
      do dim=1,3
         do face=1,2
            correct(dim,face)=1
         enddo
      enddo

      output = 0
      dummy=0
      if(nsubgrids .eq. 2 ) then
         dummy =10
      endif

c     --- 
c     --- Generate the flux dimensions and offset for the flux index.
c     --- This is the map from the one dimensional array passed in to the fortran to the 
c     --- many dimensional, non-rectangular array that the actual flux correction needs.
c     --- 

      sizeothersubgrids(1) = 0
      
      do s=1,nsubgrids
         sizeofsubgrid=0
         SizeOtherDims(1,s)=0
         
         do dim = 1,3

            sizeofface = 1
            
            do coord=1,3
               
               fdim(dim, coord, s)=
     +              fluxextents(dim,coord,1,2,s)-
     +              fluxextents(dim,coord,1,1,s)+1
               
c     the two is for Left and Right fluxes.
               sizeofface = 2*sizeofface*fdim(dim,coord,s)
               
            enddo

            sizeofsubgrid = sizeofsubgrid+sizeofface
            SizeOtherDims(dim+1,s)=SizeOtherDims(dim,s)+sizeofface

         enddo

         sizeothersubgrids(s+1)=sizeothersubgrids(s)+sizeofsubgrid

c -------- this is what we're actually after.
c -------- I recognize that there are some redundancies in the preceeding.  
c -------- I opted for clarity over cleverness. (if this comment is confusing, ignore it.)

         do dim=1,3
           TotalOffset(dim,s)=SizeOtherDims(dim,s)+SizeOtherSubgrids(s)
         enddo

      enddo

c     end of sub-crap -------------------

c      open(unit=700,file='file.X0',status='unknown',position='append')
c      open(unit=710,file='file.X1',status='unknown',position='append')
c      open(unit=701,file='file.Y0',status='unknown',position='append')
c      open(unit=711,file='file.Y1',status='unknown',position='append')
c      open(unit=702,file='file.Z0',status='unknown',position='append')
c      open(unit=712,file='file.Z1',status='unknown',position='append')


 800  format(10f9.5)
      
      is = 1      
      ie = idim
      js = 1
      je = jdim
      ks = 1
      ke = kdim

      if( Hack2d .eq. 1 ) then
         ks=3
         ke=kdim-2
c         write(*,*) " Kdim ", kdim, "sweep (", ks, ",", ke,")"

      endif
      nhyt = nhy
      
c     if( kdim .eq. 12 ) then
c     c         nhyt = nhyt + 2
c     endif
      
      ixyz = mod(nhyt,rank)
      

c     This strang business is an experiment.  It doesn't work.  
c      dtstrang = dt/2.0      
      dtstrang = dt
      dtdx = dtstrang/dx
      dtdy = dtstrang/dy
      dtdz = dtstrang/dz


#ifdef USESTRANG
      strang = 0 
#else
      do strang = 0,0
#endif         
         
         if (strang .eq. 0 ) then
            nstart = ixyz
            nend = ixyz+rank-1
            increment = 1
         else 
            nstart = ixyz+rank-1
            nend = ixyz
            increment = -1
         endif
         
c     onlyx = 0
c     if(onlyx .eq. 1 ) then
c     c     side is zero based.
c     if( idim .eq. 12 ) side = 2
c     if( jdim .eq. 12 ) side = 0
c     if( kdim .eq. 12 ) side = 1
c     nstart = side
c     nend = side
c     endif
         
c     
c     Loop over all 3 directions.
c     

#ifdef USESTRANG
       n=1
 704  continue
      if (n.ge.4) goto 705
      if (iflag(nmod,n).eq.1) then
         goto 701
      elseif (iflag(nmod,n).eq.2) then
         goto 702
      elseif (iflag(nmod,n).eq.3) then
         goto 703
      else
         goto 705
      endif    
#else
      do n=nstart, nend, increment
#endif

c     
c     X sweep
c     
#ifdef USESTRANG
 701  continue       
#else
      if (mod(n,rank) .eq. 0) then
#endif        
            
            na = idim - 4

            if(verb.eq.1)write(*,*) "x step "

            dim=1

            do k=ks, ke
            do j=js, je
                  
            do i=1,idim
                     
c     Note: This solver takes momentum, not velocity.

               wx(i,1)=d(i,j,k)
               wx(i,2)=vx(i,j,k)*d(i,j,k)
               wx(i,3)=vy(i,j,k)*d(i,j,k)
               wx(i,4)=vz(i,j,k)*d(i,j,k)
               wx(i,5)=bxc(i,j,k)
               wx(i,6)=byc(i,j,k)
               wx(i,7)=bzc(i,j,k)
               wx(i,8)=e(i,j,k)
               wx(i,9)=0
               wx(i,10)=0
               if( gravityon .eq. 1 ) wx(i,11)=gr_ax(i,j,k)

               do mmm=1,7
                  fluxx(i,mmm) = -666.123
               enddo

c               do mmm=1,10
c                  if( wx(i,mmm) .ne. wx(i,mmm) ) then
c                     write(*,*) "SHIT! failure, beginning of x"
cc                     ERROR_MESSAGE
c                  endif
c               enddo               

               if(output .eq. 1) then
                  write(700,800) wx(i,1),wx(i,8),wx(i,2),wx(i,3),
     +                 wx(i,4),wx(i,5),wx(i,6),
     +                 wx(i,7),wx(i,9), wx(i,10)
               endif
            enddo
            
#ifdef NSS
            call mhdtvd(dtstrang, dx, na, wx, fluxx, gamma, gravityon,
     +	                tiny, tiny, recon, riemann, eps)
#else
            call mhdtvd(dtstrang, dx, na, wx, fluxx, gamma, gravityon,
     +	                tiny, tiny)       
#endif
            do i=is,ie

               if(output .eq. 1 ) then
                  write(710,800) wx(i,1),wx(i,8),wx(i,2),wx(i,3),
     +                 wx(i,4),wx(i,5),wx(i,6),
     +                 wx(i,7),wx(i,9), wx(i,10)
               endif
               
               d(i,j,k) = wx(i,1)
               vx(i,j,k) = wx(i,2)/d(i,j,k)
               vy(i,j,k) = wx(i,3)/d(i,j,k)
               vz(i,j,k) = wx(i,4)/d(i,j,k)
               bxc(i,j,k) = wx(i,5)
               byc(i,j,k) = wx(i,6)
               bzc(i,j,k) = wx(i,7)
               e(i,j,k) = wx(i,8)
               
c
c     fill the flux array for SubgridFluxCorrection.
c

c     fluxextents(dim,coord,face,n,s)

c     dim=1 is set at the beginning of the sweep.

               do s=1, nsubgrids

                  do face=1,2
                     if( i .eq. fluxextents(dim,1,face,1,s) 
     +                .and. (j .le. fluxextents(dim,2,face,2,s))
     +                .and. (j .ge. fluxextents(dim,2,face,1,s))
     +                .and. (k .le. fluxextents(dim,3,face,2,s))
     +                .and. (k .ge. fluxextents(dim,3,face,1,s))
     +                .and. (correct(dim,face) .eq. 1)    ) then
                        
c     effective indexing: flux(i,j,k,dimension, face, subgrid)
c     I'm afraid this may cause cache misses.  If you come up with a better
c     way, please let me know.

                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array",
c     +                      index, totalfluxsize, "(",i,j,k,s,face,
c     +                      ")[",fdim(1,1,s), fdim(1,2,s), fdim(1,3,s),
c     +                      "]",sizeothersubgrids(s), 
c     +                      + i - fluxextents(1,1,face,1,s)
c     +                      + fdim(1,1,s)*(j- fluxextents(1,2,face,1,s)
c     +                      + fdim(1,2,s)*(k- fluxextents(1,3,face,1,s)
c     +                      + fdim(1,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxx(i-1,mmm)=0.1
c1000*j+10*mmm+face
                        enddo
                        

                        fd(index)  = fd(index) +dtdx*fluxx(i-1,1)
                        fvx(index) = fvx(index)+dtdx*fluxx(i-1,2)
                        fvy(index) = fvy(index)+dtdx*fluxx(i-1,3)
                        fvz(index) = fvz(index)+dtdx*fluxx(i-1,4)
                        fe(index)  = fe(index) +dtdx*fluxx(i-1,7)

c                        do mmm=1,7
c                           if( fluxx(i-1,mmm) .ne. fluxx(i-1,mmm)) then
c                              write(*,*) "SHIT! Flux Failure x, ijkflg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               
               
            enddo
            
c     The difference in indexing comes from a difference
c     in variable definition
            
            do i=is+1, ie
               fx1(i,j,k) = fx1(i,j,k) + wx(i-1,9)
               fx2(i,j,k) = fx2(i,j,k) + wx(i-1,10)
            enddo
            
         enddo
      enddo
      
      
#ifdef USESTRANG
       n=n+1
       goto 704
 702   continue            
#else
       else if (mod(n,rank) .eq. 1) then 
#endif

         if(verb.eq.1)write(*,*) "y step, ", nhy
         dim=2
         na = jdim - 4

         do k=ks, ke
         do i=is,ie

         do j=1,jdim
                       
            wy(j,1)=d(i,j,k)
            wy(j,2)=vy(i,j,k)*d(i,j,k)
            wy(j,3)=vz(i,j,k)*d(i,j,k)
            wy(j,4)=vx(i,j,k)*d(i,j,k)
            wy(j,5)=byc(i,j,k)
            wy(j,6)=bzc(i,j,k)
            wy(j,7)=bxc(i,j,k)
            wy(j,8)=e(i,j,k)
            wy(j,9)=0
            wy(j,10)=0

            if( gravityon .eq. 1 ) wy(j,11)=gr_ay(i,j,k)


            do mmm = 1,7
               fluxy(j,mmm) = -666.123
            enddo
            if(output .eq. 1) then
               write(701,800) wy(j,1),wy(j,8),wy(j,2),wy(j,3),
     +              wy(j,4),wy(j,5),wy(j,6),
     +              wy(j,7),wy(j,9), wy(j,10)
            endif

c            do mmm=1,10
c               if( wy(j,mmm) .ne. wy(j,mmm) ) then
c                  write(*,*) "SHIT! failure, beginning of y"
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
         enddo
         
#ifdef NSS
            call mhdtvd(dtstrang, dy, na, wy, fluxy, gamma, gravityon,
     +        tiny, tiny, recon, riemann, eps)
#else
            call mhdtvd(dtstrang, dy, na, wy, fluxy, gamma, gravityon,
     +        tiny, tiny)       
#endif            
         
         do j=js, je
            d(i,j,k) = wy(j,1)
            vx(i,j,k) = wy(j,4)/d(i,j,k)
            vy(i,j,k) = wy(j,2)/d(i,j,k)
            vz(i,j,k) = wy(j,3)/d(i,j,k)
            bxc(i,j,k) = wy(j,7)
            byc(i,j,k) = wy(j,5)
            bzc(i,j,k) = wy(j,6)
            e(i,j,k) = wy(j,8)
            
            if(output .eq. 1) then
               write(711,800) wy(j,1),wy(j,8),wy(j,2),wy(j,3),
     +              wy(j,4),wy(j,5),wy(j,6),
     +              wy(j,7),wy(j,9), wy(j,10)
            endif

c            do mmm=1,10
c               if( wy(j,mmm) .ne. wy(j,mmm) ) then
c                  write(*,*) "SHIT! failure, end of y"
cc                  ERROR_MESSAGE
c               endif
c            enddo

c     dim=2 is set at the beginning of the sweep.

               do s=1, nsubgrids

                  do face=1,2
                     if( j .eq. fluxextents(dim,2,face,1,s) 
     +                .and. (i .le. fluxextents(dim,1,face,2,s))
     +                .and. (i .ge. fluxextents(dim,1,face,1,s))
     +                .and. (k .le. fluxextents(dim,3,face,2,s))
     +                .and. (k .ge. fluxextents(dim,3,face,1,s))
     +                .and. (correct(dim,face) .eq. 1)    ) then
                        
                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array, y",
c     +                    index, totalfluxsize, "(",i,j,k,s,face,
c     +                ")[",fdim(dim,1,s), fdim(dim,2,s), fdim(dim,3,s),
c     +                "]",sizeothersubgrids(s), 
c     +                + i - fluxextents(dim,1,face,1,s)
c     +                + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
c     +                + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
c     +                + fdim(dim,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxy(j-1,mmm)=0.1
c1000*j+10*mmm+face
                        enddo


                        fd(index)  = fd(index) +dtdy*fluxy(j-1,1)
                        fvy(index) = fvy(index)+dtdy*fluxy(j-1,2)
                        fvz(index) = fvz(index)+dtdy*fluxy(j-1,3)
                        fvx(index) = fvx(index)+dtdy*fluxy(j-1,4)
                        fe(index)  = fe(index) +dtdy*fluxy(j-1,7)

c                        do mmm=1,7
c                           if( fluxy(j-1,mmm) .ne. fluxy(j-1,mmm)
c     +                          .and. mmm .ne. 6
c     +                          .and. mmm. ne. 5) then
c                          write(*,*) "SHIT! Flux Failure y, ijkflg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               


            
         enddo
         
         do j=js+1, je
            fy2(i,j,k) = fy2(i,j,k)+wy(j-1,9)
            fy1(i,j,k) = fy1(i,j,k)+wy(j-1,10)
         enddo
         
      enddo
      enddo	                     
      
#ifdef USESTRANG
       n=n+1
       goto 704
 703   continue
#else                               
       else if (mod(n,rank) .eq. 2 .and. (Hack2d .ne. 1) ) then
#endif 
         
         na = kdim-4
         if(verb.eq.1)write(*,*) "z step"
         dim=3

         do i=is, ie
         do j=js, je
                  
         do k=1,kdim
            wz(k,1) = d(i,j,k)
            wz(k,2) = vz(i,j,k)*d(i,j,k)
            wz(k,3) = vx(i,j,k)*d(i,j,k)
            wz(k,4) = vy(i,j,k)*d(i,j,k)
            wz(k,5) = bzc(i,j,k)
            wz(k,6) = bxc(i,j,k)
            wz(k,7) = byc(i,j,k)
            wz(k,8) = e(i,j,k)
            wz(k,9)=0
            wz(k,10)=0
            
            if( gravityon .eq. 1 ) wz(k,11) = gr_az(i,j,k)

            if(output .eq. 1) then
               write(702,800) wz(k,1),wz(k,8),wz(k,2),wz(k,3),
     +              wz(k,4),wz(k,5),wz(k,6),
     +              wz(k,7),wz(k,9), wz(k,10)
               
            endif
c            do mmm=1,10
c               if( wz(k,mmm) .ne. wz(k,mmm) ) then
c                  write(*,*) "SHIT! failure, beginning of z"
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
         enddo
         
#ifdef NSS
           call mhdtvd(dtstrang, dz, na, wz, fluxz, gamma, gravityon,
     +        tiny, tiny, recon, riemann, eps)
#else
            call mhdtvd(dtstrang, dz, na, wz, fluxz, gamma, gravityon,
     +	                tiny, tiny)       
#endif
         do k=ks, ke
            if(output .eq. 1) then
               write(712,800) wz(k,1),wz(k,8),wz(k,2),wz(k,3),
     +              wz(k,4),wz(k,5),wz(k,6),
     +              wz(k,7),wz(k,9), wz(k,10)
            endif

c            do mmm=1,10
c               if( wz(k,mmm) .ne. wz(k,mmm) ) then
c                  write(*,*) "SHIT! failure, end of z", i, j, k, mmm
cc                  ERROR_MESSAGE
c               endif
c            enddo
            
            d(i,j,k) = wz(k,1)
            vx(i,j,k) = wz(k,3)/d(i,j,k)
            vy(i,j,k) = wz(k,4)/d(i,j,k)
            vz(i,j,k) = wz(k,2)/d(i,j,k)
            bxc(i,j,k) = wz(k,6)
            byc(i,j,k) = wz(k,7)
            bzc(i,j,k) = wz(k,5)
            e(i,j,k) = wz(k,8)
            
c     dim=3 is set at the beginning of the sweep.

            do s=1, nsubgrids

                  do face=1,2
                     if( k .eq. fluxextents(dim,3,face,1,s) 
     +                .and. (i .le. fluxextents(dim,1,face,2,s))
     +                .and. (i .ge. fluxextents(dim,1,face,1,s))
     +                .and. (j .le. fluxextents(dim,2,face,2,s))
     +                .and. (j .ge. fluxextents(dim,2,face,1,s))
     +                .and. (correct(dim,face) .eq. 1) ) then
                        

                        index=1
     +                  + i - fluxextents(dim,1,face,1,s)
     +                  + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
     +                  + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
     +                  + fdim(dim,3,s)*(face-1)))
     +                  + TotalOffset(dim, s)

c                        if( index .ge. totalfluxsize ) then
c                           write(*,*) "SHIT!  Exceeding flux array, y",
c     +                    index, totalfluxsize, "(",i,j,k,s,face,
c     +                ")[",fdim(dim,1,s), fdim(dim,2,s), fdim(dim,3,s),
c     +                "]",sizeothersubgrids(s), 
c     +                + i - fluxextents(dim,1,face,1,s)
c     +                + fdim(dim,1,s)*(j- fluxextents(dim,2,face,1,s)
c     +                + fdim(dim,2,s)*(k- fluxextents(dim,3,face,1,s)
c     +                + fdim(dim,3,s)*(0)))
c                           
c                           ERROR_MESSAGE
c                        endif

                        do mmm=1,7
c                           fluxz(k-1,mmm)=0.1
c1000*k+10*mmm+face
                        enddo


                        fd(index)  = fd(index) +dtdz*fluxz(k-1,1)
                        fvz(index) = fvz(index)+dtdz*fluxz(k-1,2)
                        fvx(index) = fvx(index)+dtdz*fluxz(k-1,3)
                        fvy(index) = fvy(index)+dtdz*fluxz(k-1,4)
                        fe(index)  = fe(index) +dtdz*fluxz(k-1,7)
                        
c                        do mmm=1,7
c                           if( fluxz(k-1,mmm) .ne. fluxz(k-1,mmm)
c     +                          .and. mmm .ne. 5 
c     +                          .and. mmm .ne. 6) then
c                              write(*,*) "SHIT! Flux Failure z ijfklg"
c                              
c                              write(*,*) i,j,k,mmm, level, grid
c                              ERROR_MESSAGE
c                           endif
c                        enddo
                        
                     endif
                  enddo
               enddo
c ------------ end the flux shit               

            
         enddo
         
         do k=ks+1, ke
            fz1(i,j,k) = fz1(i,j,k)+wz(k-1,9)
            fz2(i,j,k) = fz2(i,j,k)+wz(k-1,10)
         enddo
      enddo
      enddo
      
      

#ifdef USESTRANG
       n=n+1
       goto 704
 705   continue
#else
c     end z sweep
      endif

c     end of strang split loop
      enddo
c     end of the other loop
      enddo

#endif
      
      close(700)
      close(701)
      close(702)
      close(710)
      close(711)
      close(712)
      

      end
