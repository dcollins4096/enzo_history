*****************************************************************************
*                                                                           *
* Copyright 2004 Greg Bryan                                                 *
* Copyright 2004 Laboratory for Computational Astrophysics                  *
* Copyright 2004 Board of Trustees of the University of Illinois            *
* Copyright 2004 Regents of the University of California                    *
*                                                                           *
* This software is released under the terms of the "Enzo Public License"    *
* in the accompanying LICENSE file.                                         *
*                                                                           *
*****************************************************************************

#include "fortran.def"
#include "error.def"
c=======================================================================
c/////////////////////  SUBROUTINE ZEUS_YTRANSPORT  \\\\\\\\\\\\\\\\\\\\
c
      subroutine zeus_ytransport(d, e, u, v, w, in, jn, kn, rank,
     &                           is, ie, js, je, ks, ke,
     &                           dt, dy, f1, bottom,
     &                           nsubgrids, lface, rface,
     &                           fistart, fiend, fjstart, fjend,
     &                           dindex, eindex, geindex,
     &                           uindex, vindex, windex, array,
     &                           ncolor, colorpt, coloff, colindex)
c
c  TRANSPORT TERM IN Y-DIRECTION FOR ZEUS HYDRO (CARTESIAN ONLY)
c
c  written by: Greg Bryan (implemented from Stone & Norman, ApJS 80, 753)
c  date:       February, 1997
c  modified1:  Alexei Kritsuk, April 2003
c
c  PURPOSE:
c
c  EXTERNALS:
c
c  INPUTS:
c     d       - density field (includes boundary zones)
c     dx,y,z  - zone width arrays for each dimension
c     e       - gas specific energy field
c     i,j,kn  - dimensions of field arrays
c     rank    - dimension of problem (not currently used)
c     u       - x-velocity field
c     v       - y-velocity field
c     w       - z-velocity field
c
c  LOCALS:
c
c-----------------------------------------------------------------------
      implicit NONE
c-----------------------------------------------------------------------
c
c     Arguments
c
      integer in, jn, kn, is, ie, js, je, ks, ke, rank, bottom,
     &        nsubgrids, ncolor, coloff(ncolor)
      integer fistart(nsubgrids*3), fiend(nsubgrids*3),
     &        fjstart(nsubgrids*3), fjend(nsubgrids*3),
     &        lface(nsubgrids*3), rface(nsubgrids*3)
      integer dindex(nsubgrids*6), eindex(nsubgrids*6),
     &        uindex(nsubgrids*6), vindex(nsubgrids*6),
     &        windex(nsubgrids*6),geindex(nsubgrids*6),
     &        colindex(nsubgrids*6,ncolor)
      real    array(1), colorpt(1)
      real    d(in,jn,kn), e(in,jn,kn), u(in,jn,kn), v(in,jn,kn),
     &        w(in,jn,kn), f1(in,jn,kn), dy(jn)
      real    dt
c
c     Parameters
c
      integer ijk
      parameter (ijk = MAX_ANY_SINGLE_DIRECTION)
c
c     Locals
c
      integer i, j, k, im1, km1, n, idim, offset, ic, ind
      real   dnew, f2(ijk), f3(ijk), f4(ijk), f5(ijk),
     &       dstar(ijk), estar(ijk), ustar(ijk), vstar(ijk), wstar(ijk),
     &       uavgi(ijk), uavgj(ijk), uavgk(ijk),
     &       colstar(ijk, MAX_COLOR), ueff(ijk)
c
#define NO_VELOCITY_AVERAGE
#define DENS_LIMIT 1000000.0
c
c     IF YOU CHANGE THE FOLLOWING HERE, 
c     CHANGE THEM IN ALL zeus_?transport.src FILES!
c
#define MIN_DENSITY_CHANGE 0.0
#define MIN_ENERGY_CHANGE  0.0
#define MIN_COLOR_CHANGE   0.1
c
c\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////////
c=======================================================================
c
c     2) Transport step - y direction
c
c     Compute the mass flux over the entire field
c
      do k = 1, kn
         do i = 1, in
c
c           Interpolate density
c
            do j = 1, jn
               ueff(j) = v(i,j,k)
            enddo
c
#ifdef VELOCITY_AVERAGE
            if (bottom .eq. 1) then
               do j = js-1, je+2
                  jm1 = max(j-1, js-2)
                  if (max(d(i,jm1,k),d(i,j,k)) .gt. DENS_LIMIT) then
                     jp1 = min(j+1, je+3)
                     jm2 = max(j-2, js-2)
                     jp2 = min(j+2, je+3)
                     jm3 = max(j-3, js-2)
c
                     ueff(j) = ((d(i,jm2,k)+d(i,jm1,k))*v(i,jm1,k)+
     &                          (d(i,jm1,k)+d(i,j  ,k))*v(i,j  ,k)+
     &                          (d(i,j  ,k)+d(i,jp1,k))*v(i,jp1,k))/
     &                      (    d(i,jm2,k)+
     &                       2.0*d(i,jm1,k)+2.0*d(i,j  ,k)+
     &                           d(i,jp1,k))
                  endif
               enddo
            endif
#endif
c
            call vanlr2_zc(d, in, jn, kn, js-1, je+2, i, k,
     &                     dy, dt, ueff, dstar)
c
c           Compute mass flux
c
            do j = js-2, je+3
               f1(i,j,k) = dstar(j)*ueff(j)
            enddo
c
         enddo
      enddo
c
c     Update the quantities (loop backwards on j,k so j-1,k-1 are old values)
c
      do k = kn, 1, -1
         do i = in, 1, -1
            im1 = max(i-1, 1)
            km1 = max(k-1, 1)
c
            do j = 1, jn
               ueff(j) = v(i,j,k)
            enddo
c
#ifdef VELOCITY_AVERAGE
            if (bottom .eq. 1) then
               do j = js-1, je+2
                  jm1 = max(j-1, js-2)
                  if (max(d(i,jm1,k),d(i,j,k)) .gt. DENS_LIMIT) then
                     jp1 = min(j+1, je+3)
                     jm2 = max(j-2, js-2)
                     jp2 = min(j+2, je+3)
                     jm3 = max(j-3, js-2)
c
                     ueff(j) = ((d(i,jm2,k)+d(i,jm1,k))*v(i,jm1,k)+
     &                          (d(i,jm1,k)+d(i,j  ,k))*v(i,j  ,k)+
     &                          (d(i,j  ,k)+d(i,jp1,k))*v(i,jp1,k))/
     &                      (    d(i,jm2,k)+
     &                       2.0*d(i,jm1,k)+2.0*d(i,j  ,k)+
     &                           d(i,jp1,k))
                  endif
               enddo
            endif
#endif
c
            call vanlr2_zc(e, in, jn, kn, js-1, je+2, i, k,
     &                     dy, dt, ueff, estar)
c
c           Compute color flux (assuming it is density-like) and advect
c              color variables (zone-centered)
c
            do ic = 1, ncolor
               call vanlr2_zc(colorpt(coloff(ic)+1),
     &                        in, jn, kn, js-1, je+2, i, k,
     &                        dy, dt, ueff, colstar(1,ic))
               do j = js-2, je+3
                  colstar(j,ic) = colstar(j,ic) * ueff(j)
               enddo
               do j = js-2, je+2
                  ind = coloff(ic)+((k-1)*jn+j-1)*in+i
                  colorpt(ind) =
     &              max(MIN_COLOR_CHANGE*colorpt(ind),
     &                      colorpt(ind) +
     &                      dt*(colstar(j,ic) - colstar(j+1,ic))/dy(j))
               enddo
            enddo
c
c           Compute energy flux
c
            do j = js-2, je+3
               f5(j) = estar(j)*f1(i,j,k)
            enddo
c
c           Make appropriately-averaged quanitities for advection
c
            do j=js-3, je+2
               uavgi(j) = 0.5*(v(i,j,k) + v(im1,j,k))
               uavgj(j) = 0.5*(ueff(j) + ueff(j+1))
               uavgk(j) = 0.5*(v(i,j,k) + v(i,j,km1))
            enddo
            j = je+3
            uavgi(j) = 0.5*(v(i,j,k) + v(im1,j,k))
            uavgk(j) = 0.5*(v(i,j,k) + v(i,j,km1))
c
c           Interpolate velocities
c
            call vanlr2_zc(u, in, jn, kn, js-1, je+2, i, k,
     &                     dy, dt, uavgi, ustar)
            call vanlr2_fc(v, in, jn, kn, js-1, je+1, i, k,
     &                     dy, dt, uavgj, vstar)
            if (rank .gt. 2)  then
               call vanlr2_zc(w, in, jn, kn, js-1, je+2, i, k,
     &                        dy, dt, uavgk, wstar)
            end if
c
c           Compute momentum fluxes
c

            j = js-2
            f3(j) = vstar(j)*0.5*(f1(i,j,k) + f1(i,j+1,k))
            do j = js-1, je+2
               f2(j) = ustar(j)*0.5*(f1(i,j,k) + f1(im1,j,k))
               f3(j) = vstar(j)*0.5*(f1(i,j,k) + f1(i,j+1,k))
               f4(j) = wstar(j)*0.5*(f1(i,j,k) + f1(i,j,km1))
            enddo
c
c           Convert velocities to momenta
c

            j = je+2
            v(i,j,k) = v(i,j,k)*0.5*(d(i,j,k) + d(i,j-1,k))
            v(i,j,k) = v(i,j,k) + dt*(f3(j-1)-f3(j))/dy(j)
            do j = js-1, je+1
               u(i,j,k) = u(i,j,k)*0.5*(d(i,j,k) + d(im1,j,k))
               u(i,j,k) = u(i,j,k) + dt*(f2(j  )-f2(j+1))/dy(j)
               v(i,j,k) = v(i,j,k)*0.5*(d(i,j,k) + d(i,j-1,k))
               v(i,j,k) = v(i,j,k) + dt*(f3(j-1)-f3(j))/dy(j)
               w(i,j,k) = w(i,j,k)*0.5*(d(i,j,k) + d(i,j,km1))
               w(i,j,k) = w(i,j,k) + dt*(f4(j  )-f4(j+1))/dy(j)
            enddo
c
c              Update mass and energy fluxes
c
            do j = js-2, je+2
c
               dnew = max (
     &              MIN_DENSITY_CHANGE*d(i,j,k),
     &              d(i,j,k) + dt*(f1(i,j,k) - f1(i,j+1,k))/dy(j))
c
               e(i,j,k) = max (
     &              MIN_ENERGY_CHANGE*e(i,j,k),
     &              (e(i,j,k)*d(i,j,k)
     &              +   dt*(f5(j) - f5(j+1))/dy(j))/dnew)
c
               if (e(i,j,k) .le. 0.0 .or. dnew .le. 0.0) then
                  write(6,*) 'zyt',d(i,j,k),e(i,j,k),dnew,dt
                  ERROR_MESSAGE
               endif
               d(i,j,k) = dnew
            enddo
c
c              Convert momenta back to velocities
c
            do j = js-1, je+2
               v(i,j,k) = v(i,j,k)/(0.5*(d(i,j,k) + d(i,j-1,k)))
               if (abs(v(i,j,k)) .gt. dy(j)/dt) then
                  write(6,*) 'vy',i,j,k,ie,je,ke
                  write(6,*) v(i,j,k),d(i,j,k),d(i,j-1,k)
                  ERROR_MESSAGE
               endif
            enddo
c
c     Copy mass fluxes into subgrid boundaries
c     (all subgrid quantities are zero based)
c
         do n=0, nsubgrids-1
           if (i .ge. fistart(n*3+2)+1 .and. i .le. fiend(n*3+2)+1 .and.
     &         k .ge. fjstart(n*3+2)+1 .and. k .le. fjend(n*3+2)+1) then
             idim = fiend(n*3+2) - fistart(n*3+2) + 1
             offset = i-fistart(n*3+2) + (k-fjstart(n*3+2)-1)*idim
             array(dindex(n*6+3)+offset) = f1(i, lface(n*3+2)+1, k)*dt
             array(dindex(n*6+4)+offset) = f1(i, rface(n*3+2)+2, k)*dt
             do ic=1, ncolor
               array(colindex(n*6+3,ic)+offset) =
     &                                  colstar(lface(n*3+2)+1, ic)*dt
               array(colindex(n*6+4,ic)+offset) =
     &                                  colstar(rface(n*3+2)+2, ic)*dt
             enddo
          endif
       enddo
c
c        Next i,k
c
         enddo
      enddo
c
c     Convert u,w momenta back to velocities
c
      do k = 1, kn
         do i = 1, in
            im1 = max(i-1, 1)
            km1 = max(k-1, 1)
            do j = js-1, je+1
               u(i,j,k) = u(i,j,k)/(0.5*(d(i,j,k) + d(im1,j,k)))
               if (abs(u(i,j,k)) .gt. dy(j)/dt) then
                  write(6,*) 'uy',i,j,k,ie,je,ke,im1
                  write(6,*) u(i,j,k),d(i,j,k),d(im1,j,k)
                  WARNING_MESSAGE
               endif
               w(i,j,k) = w(i,j,k)/(0.5*(d(i,j,k) + d(i,j,km1)))
               if (abs(w(i,j,k)) .gt. dy(j)/dt) then
                  write(6,*) 'wy',i,j,k,ie,je,ke,km1
                  write(6,*) w(i,j,k),d(i,j,k),d(i,j,km1)
                  WARNING_MESSAGE
               endif
            enddo
         enddo
      enddo
c
      return
      end
