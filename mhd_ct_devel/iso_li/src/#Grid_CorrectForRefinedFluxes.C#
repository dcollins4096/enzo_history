/*****************************************************************************
 *									     *
 * Copyright 2004 Greg Bryan						     *
 * Copyright 2004 Laboratory for Computational Astrophysics		     *
 * Copyright 2004 Board of Trustees of the University of Illinois	     *
 * Copyright 2004 Regents of the University of California		     *
 *									     *
 * This software is released under the terms of the "Enzo Public License"    *
 * in the accompanying LICENSE file.					     *
 *									     *
 *****************************************************************************/
/***********************************************************************
/
/  GRID CLASS (CORRECT SOLUTION GIVEN ORIGINAL AND REFINED FLUXES)
/
/  written by: Greg Bryan
/  date:       November, 1994
/  modified1:  Robert Harkness
/  date:       January, 2003
/	       Include extra fields beyond Metallicity!
/  modified2:  David Collins & Rick Wagner 
/  date:       May, 2005
/	       Include flux correction for outside grids.
/              Re-instated CorrectBoundaryFlux code.
/
/  PURPOSE:    Ensures conservation of stuff.
/
/  RETURNS: SUCCESS or FAIL
/
************************************************************************/

// Given both the original and refined fluxes for a subgrid in the current
//   grid, correct the solution in the cells just outside the solution to
//   reflect the new fluxes (which are determined from the solution of
//   the subgrid).
//   Note that if the subgrid is on the boundary of the current grid, we
//     do not correct the values but instead replace the boundary fluxes
//     for the current time step (BoundaryFluxesThisTimeStep).
//   Also note that subgrids sharing a face with This Grid, but not proper subgrids,
//   also need to be taken into account.

#include <stdio.h>
#include <math.h>
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"
#include "pout.h"
#include "CosmologyParameters.h"

/* function prototypes */

#ifdef JB_OPT_FLUXES_FIX
int FindField(int f, int farray[], int n);
#ifndef DC_COSMOLOGY_FLUX_off
int CosmologyComputeExpansionFactor(FLOAT time, FLOAT *a, FLOAT *dadt);
#else

#endif


// the Totally AntiSymmetric Tensor.  Usefull for taking curls. (C=A cross B is the same as Ci=Aj Bk TAST(i,j,k) with 
// summation on repeated indicies.) 
// AntiSymmetric = 1 if i,j,k is an even permutation of 0,1,2
//               =-1 if i,j,k is an odd permutation of 0,1,2
//               = 0 otherwise
// The brute force method is at the bottom of this code.  
// Thanks to Dr. Anne Collins for this short code version of the tensor.

#define TAST(i,j,k) ( (i-j)*(j-k)*(k-i)/2 )

int grid::CorrectForRefinedFluxes(fluxes *InitialFluxes, 
				  fluxes *RefinedFluxes,
				  fluxes *BoundaryFluxesThisTimeStep
				  , int SUBlingGrid,
				  TopGridData *MetaData
				  )
/*begin*/{
  // Return if this doesn't concern us. 
  
  if (ProcessorNumber != MyProcessorNumber)
    return SUCCESS;

  // declarations 
  //arse?
  char basename[30];
  if( WriteInThisF(50) == TRUE) {
    //                                                subgrid            grid
    sprintf(basename, "data50%d%d%d.grid",dccCounter8, dccCounter6, dccCounter5);
    
    FILE *dummy = fopen(basename, "a");    
    if( this->WriteGrid(dummy, basename, MyProcessorNumber) == FAIL ){
      fprintf(stderr, "Shit.  Problem with Write Grid in SMHD.\n");
      return FAIL;
    }
    fclose(dummy);
    
  }  


  
  int i1, i2, i, j, k, dim, field, ffield, index;
  int FieldIndex, FluxIndex, GridFluxIndex, Offset, RefinedFluxIndex;
  int End[MAX_DIMENSION], Start[MAX_DIMENSION];
  
  //Dimensions of Initial and Refined fluxes.  ("Dim" should be "InitialDim")
  int Dim[MAX_DIMENSION],RefinedDim[MAX_DIMENSION] = {0,0,0};

  //Dimension and Start Index for the ParentGrid (this grid) boundary flux.
  int GridFluxDim[MAX_DIMENSION], GridFluxStartIndex[MAX_DIMENSION];  

  // Used for calculating position in the RefinedFlux and InitialFlux data structure.
  int RefinedOffset[MAX_DIMENSION] ={0,0,0}, InitialOffset[MAX_DIMENSION] = {0,0,0};

  //Internal flags: Correct the BarryonField 
  int CorrectLeftBaryonField, CorrectRightBaryonField;
  //For correction of the Parent Grid (this grid) boundary flux.
  int CorrectLeftBoundaryFlux, CorrectRightBoundaryFlux;

  //These are needed for MHD and SUBling
  int InterfaceRightDim = -1, InterfaceLeftDim = -1;

  long_int GlobalDim;

  /* If there are no fields, don't do anything. */

  if (NumberOfBaryonFields > 0) {

    /* Find fields: density, total energy, velocity1-3. */
    
    int DensNum, GENum, Vel1Num, Vel2Num, Vel3Num, TENum;
    if (this->IdentifyPhysicalQuantities(DensNum, GENum, Vel1Num, Vel2Num, 
					 Vel3Num, TENum) == FAIL) {
      fprintf(stderr, "Error in grid->IdentifyPhysicalQuantities.\n");
      return FAIL;
    }
    
    /* If using comoving coordinates, compute a(t) because we'll need it
       to multiply against the CellWidth. */
#ifndef DC_COSMOLOGY_FLUX_off
    FLOAT a = 1, dadt;
    if (ComovingCoordinates)
      if (CosmologyComputeExpansionFactor(Time, &a, &dadt) == FAIL) {
	fprintf(stderr, "Error in CosmologyComputeExpansionFactors.\n");
	return FAIL;
      }
#endif    
  
    //
    // For MHD, during a SUBling test, all faces need to know which 
    // face the interface lies on. Some general preperation is also done here.
    //

    if( SUBlingGrid == TRUE && MHD_FluxCorrection == TRUE && MHD_Used == TRUE){
      fprintf(stderr,"Warning-- using fucked up shit. CorrectForRefinedFluxes for MHD doesn't work.\n");
      return FAIL;
      for(dim=0;dim<GridRank;dim++){
	if( dim != 0 ) {
	  fprintf(stderr,"kludge: CFR, only doing dim 0\n");
	  return SUCCESS;
	}

	//
	// Periodic wrap, if necessary.
	//
	GlobalDim = 	nlongint(( DomainRightEdge[dim] - DomainLeftEdge[dim])
				 / CellWidth[dim][0]);
	
	if( RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] == 0 &&
	    MetaData->LeftFaceBoundaryCondition[dim] == periodic ){
	  RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] = GlobalDim - 1;
	  RefinedFluxes->LeftFluxEndGlobalIndex[dim][dim] = GlobalDim - 1;
	}else{
	  RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim]--;
	  RefinedFluxes->LeftFluxEndGlobalIndex[dim][dim]--;
	}
	
	if( RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] == GlobalDim - 1 &&
	    MetaData->RightFaceBoundaryCondition[dim] == periodic){
	  RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] = 0;
	  RefinedFluxes->RightFluxEndGlobalIndex[dim][dim] = 0;
	}else{
	  RefinedFluxes->RightFluxStartGlobalIndex[dim][dim]++;
	  RefinedFluxes->RightFluxEndGlobalIndex[dim][dim]++;
	}
	
	if( InitialFluxes->RightFluxStartGlobalIndex[dim][dim] ==
	    RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] ){
	  InterfaceRightDim = dim;
	  //CorrectRightBaryonField = TRUE;
	}
	
	if( InitialFluxes->LeftFluxStartGlobalIndex[dim][dim]==
	    RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] ){
	  InterfaceLeftDim = dim;
	  //CorrectLeftBaryonField = TRUE;
	}
      }//dim
    }//SUB

    //
    // Main loop over grid faces (dim)
    //

    for (dim = 0; dim < GridRank; dim++) {


      if (GridDimension[dim] > 1) {
	/* Check that the dims of InitialFluxes & RefinedFluxes are the same */

	/* don't do this for SUBlings */
	if( SUBlingGrid == FALSE ){
	  for (j = 0; j < GridRank; j++)
	    if ((InitialFluxes->LeftFluxStartGlobalIndex[dim][j] !=
		 RefinedFluxes->LeftFluxStartGlobalIndex[dim][j])  ||
		(InitialFluxes->LeftFluxEndGlobalIndex[dim][j] !=
		 RefinedFluxes->LeftFluxEndGlobalIndex[dim][j])) {
	      fprintf(stderr,"InitialFluxes & RefinedFluxes are different.\n");
	      return FAIL;
	    }
	}

	//by default, we want to correct the flux.
	CorrectLeftBaryonField = CorrectRightBaryonField = TRUE;
	if( SUBlingGrid == TRUE ){
	  
	  /* calculate Global dimensions on this level */
	  GlobalDim = 	nlongint(( DomainRightEdge[dim] - DomainLeftEdge[dim])
				 / CellWidth[dim][0]);
	  
	  /* get the dims of the refined fluxes to calculate 
	     array indices */
	  
	  for (i = 0; i < MAX_DIMENSION; i++){
	    RefinedDim[i] = RefinedFluxes->LeftFluxEndGlobalIndex[dim][i] - 
	      RefinedFluxes->LeftFluxStartGlobalIndex[dim][i] + 1;
	  }
	  
	  /* moved outside the dim loop 
	  //
	  // Periodic wrap, if necessary.
	  //
	  
	  if( RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] == 0 &&
	  MetaData->LeftFaceBoundaryCondition[dim] == periodic ){
	  RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] = GlobalDim - 1;
	  RefinedFluxes->LeftFluxEndGlobalIndex[dim][dim] = GlobalDim - 1;
	  }else{
	  RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim]--;
	  RefinedFluxes->LeftFluxEndGlobalIndex[dim][dim]--;
	  }
	  
	  if( RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] == GlobalDim - 1 &&
	  MetaData->RightFaceBoundaryCondition[dim] == periodic){
	  RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] = 0;
	  RefinedFluxes->RightFluxEndGlobalIndex[dim][dim] = 0;
	  }else{
	  RefinedFluxes->RightFluxStartGlobalIndex[dim][dim]++;
	  RefinedFluxes->RightFluxEndGlobalIndex[dim][dim]++;
	  }
	  */
	  /* check to see if we're doing this dimension at all.
	     only the dimension of contact needs to be checked,
	     since SUBling grids can only have contact along a
	     single axis. any corrections to this statement
	     earns a beer */
	  
	  
	  //note these are integers, so comparing them directly is ok.
	  //Also note that here we don't do the complete check for SUBling-ness. 
	  //More logic is necessary for any two arbitrary grids, but it's been done
	  //already in populating the SUBling list.  Here, all we need
	  //to do is determine which face needs the correction, as we already know one exists.
	
	  if( InitialFluxes->RightFluxStartGlobalIndex[dim][dim] ==
	      RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim] ){
	    CorrectRightBaryonField = TRUE;
	  }else{
	    CorrectRightBaryonField = FALSE;
	  }
	  
	  if( InitialFluxes->LeftFluxStartGlobalIndex[dim][dim]==
	      RefinedFluxes->RightFluxStartGlobalIndex[dim][dim] ){
	    CorrectLeftBaryonField = TRUE;
	  }else{
	    CorrectLeftBaryonField = FALSE;
	  }
	  
	  for (i = 0; i < MAX_DIMENSION; i++) {
	    /* calculate the offset, so the index of the refined fluxes can
	       be determined from the grid's index */
	    RefinedOffset[i] = max(InitialFluxes->LeftFluxStartGlobalIndex[dim][i]-
				   RefinedFluxes->LeftFluxStartGlobalIndex[dim][i],0);
	  }

	  //This is done in order to preserve the machinery that calculates Start &End
	  //That's the trouble with organic code, you get rediculous crap like this.
	  if( CorrectLeftBaryonField || CorrectRightBaryonField ){ 
	    RefinedFluxes->LeftFluxStartGlobalIndex[dim][dim]=0;
	    RefinedOffset[dim]=0;
	  }
	}//Subling == TRUE	

	//if( CorrectLeftBaryonField || CorrectRightBaryonField ){  Moved this to later.
      
	/* Compute Start and end indicies of flux region (with respect to
	   the current grid's flux region). */
	
	for (i = 0; i < MAX_DIMENSION; i++) {
	  Start[i] = 0;
	  End[i] = 0;
	}
	
	/* start index = subgrid flux left edge global index -
	   grid far left edge global index
	   end index = subgrid flux right edge -
	   grid far left edge global index. */
	
	/* modified to account for different dimensions to the 
	   initial and refined fluxes */
	
	for (i = 0; i < GridRank; i++) {
	  Start[i] = max(InitialFluxes->LeftFluxStartGlobalIndex[dim][i],
			 RefinedFluxes->LeftFluxStartGlobalIndex[dim][i]) -
	    nlongint((CellLeftEdge[i][0] - DomainLeftEdge[i])/
		     CellWidth[i][0]);
	  End[i] = min(InitialFluxes->LeftFluxEndGlobalIndex[dim][i],
		       RefinedFluxes->LeftFluxEndGlobalIndex[dim][i]) -
	    nlongint((CellLeftEdge[i][0] - DomainLeftEdge[i])/
		     CellWidth[i][0]);
	  
	  
	  if (Start[i] < 0 || End[i] > GridDimension[i]) {
	    fprintf(stderr, "Start/End[%d] = %d/%d\n", 
		    dim, Start[i], End[i]);
	    fprintf(stderr, "%"GOUTSYM" %"GOUTSYM" %lld\n",
		    CellLeftEdge[i][0], CellWidth[i][0], 
		    InitialFluxes->LeftFluxStartGlobalIndex[dim][i]);
	    return FAIL;
	  }
	}
	
	/* Correct vector to point at cells just outside the left face.
	   Start[dim] and End[dim] should be the same because the
	   layer to be corrected is but one cell thick. */

	//
	// hey, this is poorly written.  Re-Write it.
	// If you're reading this comment, watch out for the changes to Start, End, Dim 
	// and Offset that come shortly after this, for SUBling Grids.
	//

	Start[dim] = max(Start[dim] - 1, 0);
	End[dim]   = Start[dim];
	
	/* Compute Dimensions of InitialFluxes */
	
	for (i = 0; i < MAX_DIMENSION; i++)
	  Dim[i] = End[i] - Start[i] + 1;
	
	/* Compute Offset (in baryon field) for right side of face.
	   The +2 is there because we want to correct the cells just the 
	   right face.*/
	
	Offset = InitialFluxes->RightFluxStartGlobalIndex[dim][dim] -
	  InitialFluxes->LeftFluxStartGlobalIndex[dim][dim] + 2;
	Offset = min(Offset, GridDimension[dim]-1);  // this isn't needed (?) 
	
	
	//For SUBling grids, alter Offset, Start, and End to reflect that we're 
	//adjusting the INNER edge of the grid if the SUBgrid is outside of it. 
	
	if( SUBlingGrid ){
	  Offset -= 2; 
	  Start[dim]++;
	  End[dim]++;
	  
	  //Also correct Dim, the size of the Initial Flux: it comes from This Grid, 
	  //not the Subgrid.
	  
	  for(i=0;i<GridRank;i++)
	    if(i != dim){
	      Dim[i] = GridEndIndex[i]-GridStartIndex[i]+1;
	      InitialOffset[i] = max( RefinedFluxes->LeftFluxStartGlobalIndex[dim][i]-
				      InitialFluxes->LeftFluxStartGlobalIndex[dim][i],
				      0);
	    }else{
	      Dim[i] = 1;
	      InitialOffset[i] = 0;
	    }
	}
	
	
	/* Check to see if we should correct BoundaryFluxesThisTimeStep
	   instead of the fields themselves. */
	
	CorrectLeftBoundaryFlux = FALSE;
	CorrectRightBoundaryFlux = FALSE;
	
	if (Start[dim] == GridStartIndex[dim]-1){
	  CorrectLeftBoundaryFlux = TRUE;
	  CorrectLeftBaryonField  = FALSE;
	}
	if (Start[dim] + Offset == GridEndIndex[dim]+1){
	  CorrectRightBoundaryFlux = TRUE;
	  CorrectRightBaryonField  = FALSE;
	}
	
	/* Set GridFluxStartIndex to the starting position of the flux
	   plane (i.e. exclude grid boundary zones), except for the direction
	   of the flux is set such that GridStartIndex[dim] - Start[dim] = 0 */
	
	for (i = 0; i < MAX_DIMENSION; i++) {
	  GridFluxStartIndex[i] = GridStartIndex[i];
	  GridFluxDim[i] = GridEndIndex[i] - GridStartIndex[i] + 1;
	}
	
	GridFluxStartIndex[dim] = Start[dim];
	GridFluxDim[dim] = 1;
	
	/* Turn Offset (in dim direction) to Offset (in field array) */
	
	for (i = 0; i < dim; i++)
	  Offset *= GridDimension[i];
	
	if( CorrectLeftBaryonField || CorrectRightBaryonField ){
	  
	  /* Multiply faces by density to get conserved quantities 
	     (only multiply fields which we are going to correct) */
	  
	  if (HydroMethod != Zeus_Hydro)
	    for (field = 0; field < NumberOfBaryonFields; field++)
	      if (FieldTypeIsDensity(FieldType[field]) == FALSE &&
		  (RadiativeCooling == 0 || (FieldType[field] != TotalEnergy && 
					     FieldType[field] != InternalEnergy))&&
		  (HydroMethod != MHD_Harten || FieldType[field] != TotalEnergy)){
#ifdef ATHENA
		//not as concise to have this logic here, but not as horrible, either.
		if( FieldType[field] == TotalEnergy && HydroMethod == Athena )
		  continue;
#endif //ATHENA
#ifdef HAOXU
		if( FieldType[field] == TotalEnergy && HydroMethod == 6 )
                  continue;
#endif
		for (k = Start[2]; k <= End[2]; k++)
		  for (j = Start[1]; j <= End[1]; j++) {
		    index = (k*GridDimension[1] + j)*GridDimension[0] + Start[0];
		    for (i = Start[0]; i <= End[0]; i++, index++) {
		      BaryonField[field][index] *= BaryonField[DensNum][index];
		      BaryonField[field][index+Offset] *= 
			BaryonField[DensNum][index+Offset];
		    }
		  }
	      }//if collection

	  /* Divide species by densities so that at the end we can multiply
	     them by the new density (species are not otherwise modified --
	     see the next comment).  This ensures that the species are changed
	     to keep the same fractional density. */
	  
	  for (field = 0; field < NumberOfBaryonFields; field++)
	    if (FieldType[field] >= ElectronDensity && 
		FieldType[field] < FieldUndefined)
	      for (k = Start[2]; k <= End[2]; k++)
		for (j = Start[1]; j <= End[1]; j++) {
		  index = (k*GridDimension[1] + j)*GridDimension[0] + Start[0];
		  for (i = Start[0]; i <= End[0]; i++, index++) {
		    BaryonField[field][index] /= BaryonField[DensNum][index];
		    BaryonField[field][index+Offset] /= 
		      BaryonField[DensNum][index+Offset];
		  }
		}
	  
	  /* Correct face for difference between refined and initial fluxes. 
	     (Don't do this for energy if radiative cooling is on because it's
	     no longer conserved.  Similarly, don't do it for the species
	     because they are not individually conserved either -- in fact,
	     this could be done for the conserved quantities like charge, 
	     total number density summed over ionization, etc.) */
	  

	  for (field = 0; field < NumberOfBaryonFields; field++){
	    if ((RadiativeCooling == 0 || (FieldType[field] != TotalEnergy && 
					   FieldType[field] != InternalEnergy))
		&& (FieldType[field] < ElectronDensity)) {
	      for (k = Start[2]; k <= End[2]; k++){
		for (j = Start[1]; j <= End[1]; j++){
		  for (i = Start[0]; i <= End[0]; i++) {

		    
		    /* Compute indexes. */
		    
		    FieldIndex = (k*GridDimension[1] + j)*GridDimension[0] + i;
		    FluxIndex  = ((k - Start[2]+InitialOffset[2])*Dim[1] + 
				  (j - Start[1]+InitialOffset[1]))*Dim[0] +
		      (i - Start[0]+InitialOffset[0]);
		    

		    if( SUBlingGrid ){
		      RefinedFluxIndex = ((k - Start[2] + RefinedOffset[2])*RefinedDim[1] +
					  (j - Start[1] + RefinedOffset[1]))*RefinedDim[0] +
			(i - Start[0] + RefinedOffset[0]);
		      
		    }else{
		      RefinedFluxIndex = FluxIndex;
		    }
		    
		    GridFluxIndex = 
		      (i - GridFluxStartIndex[0]) 
		      + (j - GridFluxStartIndex[1])*GridFluxDim[0]
		      + (k - GridFluxStartIndex[2])*GridFluxDim[1]*GridFluxDim[0];
		    
		    
		    if (CorrectLeftBoundaryFlux)
		      BoundaryFluxesThisTimeStep->LeftFluxes[field][dim][GridFluxIndex] =
			RefinedFluxes->LeftFluxes[field][dim][FluxIndex];
		    
		    if(CorrectLeftBaryonField){
		      
		      if( SUBlingGrid == FALSE ){
			BaryonField[field][FieldIndex] +=
#ifdef DC_COSMOLOGY_FLUX
			  (InitialFluxes->LeftFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->LeftFluxes[field][dim][FluxIndex] );
#else
			  (InitialFluxes->LeftFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->LeftFluxes[field][dim][FluxIndex] )/
			    (CellWidth[dim][0]*a);

#endif
			  			
		      }else{ /* if( SUBlingGrid == False) */
			
			BaryonField[field][FieldIndex] -= 
#ifdef DC_COSMOLOGY_FLUX
			  (InitialFluxes->LeftFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->RightFluxes[field][dim][RefinedFluxIndex] );
#else
			  (InitialFluxes->LeftFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->RightFluxes[field][dim][RefinedFluxIndex] )/
			  (CellWidth[dim][0]*a);
#endif			
		      }
		    }
		    
		    if (CorrectRightBoundaryFlux )
		      BoundaryFluxesThisTimeStep->RightFluxes[field][dim] [GridFluxIndex] =
			RefinedFluxes->RightFluxes[field][dim][FluxIndex]; 
		    
		    /* update only if necessary */
		    if(CorrectRightBaryonField){
		      
		      if( SUBlingGrid == FALSE ){
			
			BaryonField[field][FieldIndex + Offset] -= 
#ifdef DC_COSMOLOGY_FLUX
			  (InitialFluxes->RightFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->RightFluxes[field][dim][FluxIndex] );
#else			
			  (InitialFluxes->RightFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->RightFluxes[field][dim][FluxIndex] )/
			  (CellWidth[dim][0]*a);
#endif
		      }else{ /* if( SUBlingGrid == FALSE ){ */
			BaryonField[field][FieldIndex + Offset] += 
#ifdef DC_COSMOLOGY_FLUX
			  (InitialFluxes->RightFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->LeftFluxes[field][dim][RefinedFluxIndex] );
#else
			  (InitialFluxes->RightFluxes[field][dim][FluxIndex] -
			   RefinedFluxes->LeftFluxes[field][dim][RefinedFluxIndex] )/
			  (CellWidth[dim][0]*a);
#endif			
		      } // else{ /* if( SUBlingGrid == FALSE ){ */
		    } // if(CorrectRightBaryonField)
		  
		    if ((FieldTypeIsDensity(FieldType[field]) == TRUE ||
			 FieldType[field] == TotalEnergy ||
			 FieldType[field] == InternalEnergy) &&
			(BaryonField[field][FieldIndex] <= 0 ||
			 BaryonField[field][FieldIndex+Offset] <= 0)) {
		      
		      fprintf(stderr,"ERROR: CorrectForRefinedFluxes causing problems.\n");
		      fprintf(stderr,"      Density or Energy is negative.\n");
		      fprintf(stderr,"      Please contact your Enzo service professional.\n");
		      fprintf(stderr,"      It is recomended that you install the \n");
		      fprintf(stderr,"      ConservationFix service pack.  (contact David Collins\n");
		      fprintf(stderr,"      Cell Width: %f\n",CellWidth[0][0]);
		      fprintf(stderr,"      (field, i,j,k)=(%d,%d,%d,%d)\n",field,i,j,k);
		      fprintf(stderr,"      LeftEdge = (%f,%f,%f)\n",
			      GridLeftEdge[0],GridLeftEdge[1],GridLeftEdge[2]);
		      fprintf(stderr,"      value = %f, +offset %f\n", 
			      BaryonField[field][FieldIndex],
			      BaryonField[field][FieldIndex+Offset]);
		      
		    }
		  }// for (i = Start[0]; i <= End[0]; i++) {
		} // for (j = Start[1]; j <= End[1]; j++){
	      } // for (k = Start[2]; k <= End[2]; k++){  
	    }	// if ((RadiativeCooling == 0 || (FieldType[field] != TotalEnergy && etc 
	  } // for (field = 0; field < NumberOfBaryonFields; field++){

	    /* Return faces to original quantity. */
	  
	  if (HydroMethod != Zeus_Hydro)
	    for (field = 0; field < NumberOfBaryonFields; field++)
	      if (FieldTypeIsDensity(FieldType[field]) == FALSE &&
		  (RadiativeCooling == 0 || (FieldType[field] != TotalEnergy && 
					     FieldType[field] != InternalEnergy)) &&
		  (HydroMethod != MHD_Harten || FieldType[field] != TotalEnergy)){
#ifdef ATHENA
		//not as concise to have this logic here, but not as horrible, either.
		if( FieldType[field] == TotalEnergy && HydroMethod == Athena )
		  continue;
#endif //ATHENA

		if( FieldType[field] == TotalEnergy && HydroMethod == 6 )
                  continue;

		for (k = Start[2]; k <= End[2]; k++)
		  for (j = Start[1]; j <= End[1]; j++) {
		    index = (k*GridDimension[1] + j)*GridDimension[0] + Start[0];
		    for (i = Start[0]; i <= End[0]; i++, index++) {
		      BaryonField[field][index] /= BaryonField[DensNum][index];
		      BaryonField[field][index+Offset] /=
			BaryonField[DensNum][index+Offset];
		    }
		  }
	      }//if collection

	  /* If appropriate, restore consistency between total and internal
	     energy in corrected faces. */
	  
	  if (DualEnergyFormalism == TRUE && RadiativeCooling == FALSE ){
#ifdef HAOXU
//        int temp_ge1, temp_ge2;
#endif
	    for (k = Start[2]; k <= End[2]; k++)
	      for (j = Start[1]; j <= End[1]; j++) {
		i1 = (k*GridDimension[1] + j)*GridDimension[0] + Start[0];
		i2 = i1 + Offset;
		for (i = Start[0]; i <= End[0]; i++, i1++, i2++) {

		  BaryonField[GENum][i1] = max(BaryonField[GENum][i1], 
					       tiny_number);
		  BaryonField[GENum][i2] = max(BaryonField[GENum][i2],
					       tiny_number);
		  BaryonField[TENum][i1] = BaryonField[GENum][i1] +
		    0.5 * BaryonField[Vel1Num][i1] * BaryonField[Vel1Num][i1];
		  BaryonField[TENum][i2] = BaryonField[GENum][i2] + 
		    0.5 * BaryonField[Vel1Num][i2] * BaryonField[Vel1Num][i2];
		  if (GridRank > 1) {
		    BaryonField[TENum][i1] += 
		      0.5 * BaryonField[Vel2Num][i1] * BaryonField[Vel2Num][i1];
		    BaryonField[TENum][i2] += 
		      0.5 * BaryonField[Vel2Num][i2] * BaryonField[Vel2Num][i2];
		  }
		  if (GridRank > 2) {
		    BaryonField[TENum][i1] += 
		      0.5 * BaryonField[Vel3Num][i1] * BaryonField[Vel3Num][i1];
		    BaryonField[TENum][i2] += 
		      0.5 * BaryonField[Vel3Num][i2] * BaryonField[Vel3Num][i2];
		  }


#ifdef HAOXU
		  //change the total energy to the form of MHDENZO
		  if(MHD_Used == TRUE){
		    BaryonField[TENum][i1] *= BaryonField[DensNum][i1];
		    BaryonField[TENum][i1] += 0.5*(pow(CenteredB[0][i1],2)+pow(CenteredB[1][i1],2)+pow(CenteredB[2][i1],2));
		    BaryonField[TENum][i2] *= BaryonField[DensNum][i2];
		    BaryonField[TENum][i2] += 0.5*(pow(CenteredB[0][i2],2)+pow(CenteredB[1][i2],2)+pow(CenteredB[2][i2],2));      
		  }
#endif
		  
		}		    
	      } // end: loop over faces
	  } // end: if (DualEnergyFormalism)
	  
	    /* Multiply species by density to return from fractional to real
	       density. (see comments above regarding species). */
	  
	  for (field = 0; field < NumberOfBaryonFields; field++)
	    if (FieldType[field] >= ElectronDensity && 
		FieldType[field] < FieldUndefined)
	      for (k = Start[2]; k <= End[2]; k++)
		for (j = Start[1]; j <= End[1]; j++) {
		  index = (k*GridDimension[1] + j)*GridDimension[0] + Start[0];
		  for (i = Start[0]; i <= End[0]; i++, index++) {
		    BaryonField[field][index] *= BaryonField[DensNum][index];
		    BaryonField[field][index+Offset] *=
		      BaryonField[DensNum][index+Offset];
		  }
		}
	  
	  //MHD flux correction goes here.
	}//if( CorrectLeftField || CorrectRightField)

	//if( CorrectLeftBaryonField || CorrectRightBaryonField ) I don't think I want this here

	if(MHD_Used == TRUE && MHD_FluxCorrection == TRUE && 0 == 0){

	  fprintf(stderr,"kludge: remove MHD correct[left/right] conditional.\n");
	  int BStart[3], BEnd[3], EDim[3]={1,1,1}, ERefinedDim[3]={1,1,1};
	  int WhichDx=-1;
	  
	  //controll integers for the ElectricFlag.
	  int FlagOffset, FlagIndex, FlagShift[3]={0,0,0};
	  FlagShift[dim]=1;
	  
	  
	  for(int Bfield=0;Bfield<3;Bfield++)
	if( Bfield != dim ){ //DON'T AUTO INDENT HERE.  it fucks up the spacing later.
	  
	  //Set the magnetic dims.
	  for (i = 0; i < 3; i++) {
	    BStart[i] = Start[i];
	    BEnd[i] = End[i] + MHDAdd[Bfield][i];
	  }


	  /* Compute Offset.  Just like above, except  Electric fields lie on the surface of the subgrid, 
	     so they're closer together than Baryon or Magnetic fields. (FlagOffset is done in the next loop) */
	  
	  Offset = InitialFluxes->RightFluxStartGlobalIndex[dim][dim] -
	    InitialFluxes->LeftFluxStartGlobalIndex[dim][dim] + 2;

	  // This is a terrible comment.  Re work it.
	  //note that the Baryon case also does Start -= 2, but we're just taking that value directly.
	  if( SUBlingGrid == TRUE ){
	    Offset -= 2;
	  }
	  for(i=0;i<dim;i++)
	    Offset *= MagneticDims[Bfield][i];

	  //Almost everything needs at least a little attention for the magnetic field.
	  //CorrectLeftBaryonField = TRUE;
	  //CorrectRightBaryonField= FALSE;
	  //corn2
	  if( SUBlingGrid == TRUE ){
	    if( InterfaceLeftDim == Bfield && dim != InterfaceLeftDim ){
	      CorrectLeftBaryonField = TRUE;
	      fprintf(stderr,"moo: turning Correction on dim %d Bfield %d\n", dim, Bfield);
	    }
	  }
	  
	  if( SUBlingGrid == TRUE ){
	    fprintf(stderr,"moo: dim %d B %d RightInterface %d LeftInterface %d\n",
		    dim, Bfield, InterfaceRightDim, InterfaceLeftDim);
	    fprintf(stderr,"moo: Start = %d %d %d End = %d %d %d\n",
		    BStart[0],BStart[1],BStart[2],BEnd[0],BEnd[1],BEnd[2]);
	    fprintf(stderr,"moo: InitialOffset %d %d %d\n",
		    InitialOffset[0],InitialOffset[1],InitialOffset[2]);
	  }
	  for(int Efield=0;Efield<3;Efield++){
	    if(Efield != Bfield && Efield != dim ){

	      FlagOffset =InitialFluxes->RightFluxStartGlobalIndex[dim][dim] -
		InitialFluxes->LeftFluxStartGlobalIndex[dim][dim] + 1;

	      for(i=0 ;i<dim; i++)
		FlagOffset *= ElectricDims[Efield][i];	      
	      
	      /* Compute Dimensions of ElectricField.  Start and End were calculated above. */
	      /* Also determine direction derivative is taken.  */
	      fprintf(stderr,"moo: Edim:\n");
	      for (i = 0; i < MAX_DIMENSION; i++){
		if( SUBlingGrid != TRUE ){
		  EDim[i] = End[i] - Start[i] + 1;
		}else{
		  EDim[i] = GridEndIndex[i]-GridStartIndex[i]+1;

		  InitialOffset[i] = max( RefinedFluxes->LeftFluxStartGlobalIndex[dim][i]-
					  InitialFluxes->LeftFluxStartGlobalIndex[dim][i],
					  0);

		  fprintf(stderr," %d ", EDim[i]);
		}
		
		//only used for SUBling
		ERefinedDim[i]=RefinedDim[i];
		if( i != Efield )
		  EDim[i]++;
		//Not right.  Need to re work this.
		if( i != Efield && i != dim) {
		  //fprintf(stderr,"moo: add\n"); this, i thin, used to work.  But I think its wrong, so check.
		  //EDim[i]++;
		  ERefinedDim[i]++;
		  WhichDx=i;
		}
		
	      }//i
	      EDim[dim] = 1;
	      
	    fprintf(stderr,"moo: Efield %d Edim %d %d %d\n",Efield, EDim[0],EDim[1],EDim[2]);

	      /*
		fprintf(stderr, "cfrf2: dim %d Bfield %d Efield %d EDim %d %d %d \n",
		dim, Bfield,Efield,EDim[0], EDim[1], EDim[2]);
	      */
	      
	      //The sign comes from the curl operator.
	      
	      int sign = TAST(Bfield, Efield, dim);
	      //fprintf(stderr, "TAS: Bfield %d Efield %d dim %d TAS %d\n",
	      //Bfield, Efield, dim, sign); 
	      for(k=BStart[2];k<=BEnd[2];k++)
		for(j=BStart[1];j<=BEnd[1];j++)
		  for(i=BStart[0];i<=BEnd[0];i++){
		    
		    FieldIndex=indexba(i,j,k,Bfield);
		    /*
		    FluxIndex=(i-BStart[0])+
		      EDim[0]*(j-BStart[1]+
			       EDim[1]*(k-BStart[2]));
		    */
		    
		    FluxIndex  = ((k - BStart[2]+InitialOffset[2])*EDim[1] +
				  (j - BStart[1]+InitialOffset[1]))*EDim[0] +
		      (i - BStart[0]+InitialOffset[0]);
		    
		    RefinedFluxIndex=((k-BStart[2]+RefinedOffset[2])*ERefinedDim[1]+
				  (j-BStart[1]+RefinedOffset[1]))*ERefinedDim[0]+
		      (i-BStart[0]+RefinedOffset[0]);
		    
		    FlagIndex= (i+FlagShift[0])+ 
		      ElectricDims[Efield][0]*( (j + FlagShift[1] )
						 + ElectricDims[Efield][1] * (k+FlagShift[2]) );

		    if( FieldIndex +Offset >= MagneticSize[Bfield]
			|| FluxIndex >= EDim[0]*EDim[1]*EDim[2]) {
		      fprintf(stderr, "shit: out of bounds on field indexing, CorrectForRefinedFluxes\n");
		      return SUCCESS;
		    }
		    
		    if(RefinedFluxes->LeftElectric[Efield][dim]==NULL){
		      fprintf(stderr, "SHIT! Null Electric Field. Efield %d Bfield %d dim %d\n",
			      Efield, Bfield, dim);
		      return FAIL;
		    }

		    //christian wolf(e)?
		    
		    if( CorrectLeftBaryonField == TRUE ){
		      if( ElectricFlag[Efield][Bfield][FlagIndex] == 0 ){
			//ElectricFlag[Efield][Bfield][FlagIndex]=1;			
			if( SUBlingGrid == TRUE ){
			  //SUBling Left OK
			  if( dim == InterfaceLeftDim ){
			      MagneticField[Bfield][FieldIndex] += 
			      sign*(InitialFluxes->LeftElectric[Efield][dim][FluxIndex]-
			      RefinedFluxes->RightElectric[Efield][dim][RefinedFluxIndex])
                              /CellWidth[WhichDx][0];

			  }else{
			    MagneticField[Bfield][FieldIndex] = InitialFluxes->LeftElectric[Efield][dim][FluxIndex];
			    fprintf(stderr," moo: Bfield %d %f (%d,%d,%d)\n",
				    Bfield, MagneticField[Bfield][FieldIndex],i,j,k);
			  }
			  }else{
			  //SG left hack
			  MagneticField[Bfield][FieldIndex]-=
			    sign*(InitialFluxes->LeftElectric[Efield][dim][FluxIndex]-
				  RefinedFluxes->LeftElectric[Efield][dim][FluxIndex])
                           /CellWidth[WhichDx][0];
			  if(Bfield == -2 ) 
			    MagneticField[Bfield][FieldIndex] = 8.0;
			  }
		      }//ElectricFlag
		    }//CorrectLeft
		    
		    if( CorrectRightBaryonField == TRUE ){
		      if( ElectricFlag[Efield][Bfield][FlagIndex+FlagOffset] == 0 ){
			//ElectricFlag[Efield][Bfield][FlagIndex+FlagOffset]=1;

			if( SUBlingGrid == TRUE ) {
			  //SUBling Right 
			  MagneticField[Bfield][FieldIndex+Offset] -=
			    sign*(InitialFluxes->RightElectric[Efield][dim][FluxIndex]-
				  RefinedFluxes->LeftElectric[Efield][dim][RefinedFluxIndex])
                            /CellWidth[WhichDx][0];
			}else{
			  //SG right
			  MagneticField[Bfield][FieldIndex+Offset]+=
			    sign*(InitialFluxes->RightElectric[Efield][dim][FluxIndex]-
				  RefinedFluxes->RightElectric[Efield][dim][FluxIndex])
                            /CellWidth[WhichDx][0];
			}
		      }//ElectricFlag
		    }//CorrectRightBaryon
		    
		    
		  }//index loop
	    }//Efield != Bfield
	  }//Efield loop
	}//Bfield
	
      }//MHD_used
      
	  
      // removed-- this conditional isn't needed for the MHD} // if( CorrectLeftBaryonField || CorrectRightBaryonField){ 
      } // end: if GridDimension[dim] > 1
      /* delete Refined fluxes as they're not needed anymore. */
      
      for (field = 0; field < NumberOfBaryonFields; field++) {
	delete RefinedFluxes->LeftFluxes[field][dim];
	delete RefinedFluxes->RightFluxes[field][dim];
	RefinedFluxes->LeftFluxes[field][dim] = NULL;
	RefinedFluxes->RightFluxes[field][dim] = NULL;
      }
      
    } // next dimension
  } // Number of baryons fields > 0 


  if( WriteInThisF(51) == TRUE) {
    //                                      cycle          subgrid            grid Incremented in ELRO
    sprintf(basename, "data51%d%d%d.grid",dccCounter8, dccCounter6, dccCounter5);
    
    FILE *dummy = fopen(basename, "a");    
    if( this->WriteGrid(dummy, basename, MyProcessorNumber) == FAIL ){
      fprintf(stderr, "Shit.  Problem with Write Grid in SMHD.\n");
      return FAIL;
    }
    fclose(dummy);
    
  }  
  
  
  return SUCCESS;
  
}
#endif				  
  
/* crappy version of the totally antisymmetric tensor.
int TAST(int i, int j, int k){
  
  // the Totally AntiSymmetric Tensor.  Usefull for taking curls.
  // AntiSymmetric = 1 if i,j,k is an even permutation of 0,1,2
  //               =-1 if i,j,k is an odd permutation of 0,1,2
  //               = 0 otherwise
  // I'm not very clever, so I just wrote out all the possibilities.

  
  if(i==0)
    if(j==1)
      if(k==2)
	return 1;
  
  if(i==0)
    if(j==2)
      if(k==1)
	return -1;
  
  if(i==1)
    if(j==2)
      if(k==0)
	return 1;
  
  if(i==1)
    if(j==0)
      if(k==2)
	return -1;
  
  if(i==2)
    if(j==0)
      if(k==1)
	return 1;
  if(i==2)
    if(j==1)
      if(k==0)
	return -1;
  
  return 0;
}

*/
