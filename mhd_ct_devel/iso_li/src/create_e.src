      subroutine create_e(fx1, fy1, fz1, 
     +                   fx2, fy2, fz2,
     +                   ex, ey, ez,
     +                   idim, jdim, kdim,
     +                   i1,i2,j1,j2,k1,k2, dtIn, projectE)
      
      implicit none
c     This determines e from curl(v cross b), which is determined from
c     the fluxes that come out of the rieman problem.
c     Currently, e and f are defined on the entire grid, but only
c     updated in the active zones.  

c     For those of you following along at home:
c     The following is the correspondnce with Balsara:
c     fx1 = F7; fx2 = F8;
c     fy1 = G6; fy2 = G8
c     fz1 = H6; fz2 = H7

      integer idim, jdim, kdim, i1, i2, j1, j2, k1, k2, projectE

      real fx1(idim+1,jdim,kdim),fx2(idim+1,jdim,kdim),
     +     fy1(idim,jdim+1,kdim),fy2(idim,jdim+1,kdim),
     +     fz1(idim,jdim,kdim+1),fz2(idim,jdim,kdim+1),
     +     ex(idim,jdim+1,kdim+1),
     +     ey(idim+1,jdim,kdim+1),
     +     ez(idim+1,jdim+1,kdim)
      real dtIn, dt
      integer i,j,k, is, js,ks, ie, je, ke

c     fortran starts at 1.
c     Additionally, e must be updated on the face, so 
c     one more than 'GridStopIndex'

      is = i1+1
      ie = i2+1
      js = j1+1
      je = j2+1
      ks = k1+1
      ke = k2+1
   
      if( projectE .eq. 1 ) then
         dt = dtIn
      else
         dt = 1.0
      endif
c      write(*,*) "enter create e"
c     update ex
      do k=ks,ke+1
         do j=js,je+1
            do i=is,ie
               
               ex(i,j,k) = .25*dt*(fz2(i,j-1,k)+fz2(i,j,k)
     +              -fy2(i,j,k-1)-fy2(i,j,k) )
               
            enddo
         enddo
      enddo

c     update ey
      do k=ks,ke+1
         do j=js,je
            do i=is,ie+1
               
               ey(i,j,k) = .25*dt*(fx2(i,j,k-1)+fx2(i,j,k)
     +              -fz1(i-1,j,k)-fz1(i,j,k) )
               
            enddo
         enddo
      enddo

c     update ez
      do k=ks,ke
         do j=js,je+1
            do i=is,ie+1
               
               ez(i,j,k) = .25*dt*(fy1(i-1,j,k)+fy1(i,j,k)
     +              -fx1(i,j-1,k)-fx1(i,j,k) )
               
            enddo
         enddo
      enddo
      
      end

c     ex(i,j,k) = .5*(fz(i,j-1,k)+fz(i,j,k)
c     +              -fy(i,j,k-1)-fy(i,j,k) )
c     ey(i,j,k) = .5*(fx(i,j,k-1)+fx(i,j,k)
c     +              -fz(i-1,j,k)-fz(i,j,k) )
c     ez(i,j,k) = .5*(fy(i-1,j,k)+fy(i,j,k)
c     +              -fx(i,j-1,k)-fx(i,j,k) )
      
